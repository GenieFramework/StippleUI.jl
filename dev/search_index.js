var documenterSearchIndex = {"docs":
[{"location":"API/editors.html","page":"Editors","title":"Editors","text":"CurrentModule = Editors","category":"page"},{"location":"API/editors.html","page":"Editors","title":"Editors","text":"editor","category":"page"},{"location":"API/editors.html#StippleUI.Editors.editor","page":"Editors","title":"StippleUI.Editors.editor","text":"editor(fieldname, args...; kwargs...)\n\nComponent is a WYSIWYG (“what you see is what you get”) editor component that enables the user to write and even paste HTML.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars EditorModel begin\n          s_editor::R{String} = \"What you see is <b>what</b> you get.\"\n       end\n\nView\n\njulia> editor(:s_editor, minheight=\"5rem\")\n\njulia> StippleUI.form( autocorrect=\"off\", autocapitalize=\"off\", autocomplete=\"off\", spellcheck=\"false\", [\n          editor(:s_editor)\n       ])\n\n\n\nArguments\n\n\n\nBehaviour\nfullscreen::Bool - Fullscreen mode (Note\".sync\" modifier required!) Example. :fullscreen.sync=\"isFullscreen\"\nnoroutefullscreenexit::Bool - Changing route app won't exit fullscreen\nparagraphtag::String - Paragraph tag to be used Example. div, p\nContent\nplaceholder::String - Text to display as placeholder ex. Type your story here...\nModel\nvalue::String [required!] - Reactive Model of the component\nState\nreadonly::Bool - Put component to readonly mode\ndisable::Bool - Disable component\nStyle     * square::Bool - Removes border-radius so borders are squared     * minheight::String - Minimum height of the component default. 10rem ex. 15rem 50vh     * flat::Bool - Applies a 'flat' design (no borders)     * dark::Bool - Notify the component that the background is a dark color     * maxheight::String - CSS unit for maximum height of the input area ex. 100px 90vh     * height::String - CSS value to set the height of the editable area ex. 100px 90vh     * toolbaroutline::Bool - Toolbar buttons are rendered \"outlined\"     * toolbarpush::Bool - Toolbar buttons are rendered as a \"push-button\" type     * toolbarrounded::Bool - Toolbar buttons are rendered \"rounded\"     * contentstyle::Dict - Object with CSS properties and values for styling the container of editor ex. contentstyle!=\"{ backgroundColor: '#C0C0C0' }\"     * contentclass::Union{Dict, Vector, String} - CSS classes for the input area ex. my-special-class contentclass!=\"{ 'my-special-class': <condition> }\"\n\n\n\n\n\n","category":"function"},{"location":"API/toolbars.html","page":"Toolbars","title":"Toolbars","text":"CurrentModule = Toolbars","category":"page"},{"location":"API/toolbars.html","page":"Toolbars","title":"Toolbars","text":"toolbar\ntoolbartitle","category":"page"},{"location":"API/toolbars.html#StippleUI.Toolbars.toolbar","page":"Toolbars","title":"StippleUI.Toolbars.toolbar","text":"toolbar(args...; kwargs...)\n\ntoolbar is a component usually part of Layout Header and Footer, but it can be used anywhere on the page.\n\n\n\nExamples\n\n\n\nView\n\njulia> toolbar(class=\"text-primary\", [\n          btn(flat=true, round=true, dense=true, icon=\"menu\"),\n          toolbartitle(\"Toolbar\"),\n          btn(flat=true, round=true, dense=true, icon=\"more_vert\")\n       ])\n\n\n\nArguments\n\n\n\ninset::Bool - Apply an inset to content (useful for subsequent toolbars)\n\n\n\n\n\n","category":"function"},{"location":"API/toolbars.html#StippleUI.Toolbars.toolbartitle","page":"Toolbars","title":"StippleUI.Toolbars.toolbartitle","text":"toolbartitle(args...; kwargs...)\n\n\n\nExamples\n\n\n\nView\n\njulia> toolbartitle(\"Menu\")\n\n\n\nArguments\n\n\n\nshrink::Bool -  By default, toolbartitle is set to grow to the available space. However, you can reverse that with this prop\n\n\n\n\n\n","category":"function"},{"location":"API/layouts.html","page":"Layouts","title":"Layouts","text":"CurrentModule = Layouts","category":"page"},{"location":"API/layouts.html","page":"Layouts","title":"Layouts","text":"layout\npage_container\npage","category":"page"},{"location":"API/cards.html","page":"Cards","title":"Cards","text":"CurrentModule = Cards","category":"page"},{"location":"API/cards.html","page":"Cards","title":"Cards","text":"card\ncard_section\ncard_actions","category":"page"},{"location":"API/cards.html#StippleUI.Cards.card","page":"Cards","title":"StippleUI.Cards.card","text":"  card(args...; kwargs...)\n\nCard component is a great way to display important pieces of grouped content. The Card component is intentionally lightweight and essentially a containing element that is capable of “hosting” any other component that is appropriate.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars CardModel begin\n          lorem::R{String} = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n          url::R{String} = \"https://cdn.quasar.dev/img/parallax2.jpg\"\n       end\n\nView\n\njulia> card(class=\"my-card\", [\n          imageview(src=:url, basic=true, [\n            Html.div(\"Title\", class=\"absolute-bottom text-h6\")\n          ]),\n          card_section(\"{{lorem}}\")\n       ])\n\n\n\nArguments\n\n\n\nContent     * tag::String - HTML tag to render default \"div\" ex. \"div\" \"form\"\nStyle     * dark::Bool - Notify the component that the background is a dark color     * square::Bool - Removes border-radius so borders are squared     * flat::Bool - Applies a 'flat' design (no default shadow)     * bordered::Bool - Applies a default border to the component\n\n\n\n\n\n","category":"function"},{"location":"API/cards.html#StippleUI.Cards.card_section","page":"Cards","title":"StippleUI.Cards.card_section","text":"  card_section(args...; kwargs...)\n\n\n\nExamples\n\n\n\nView\n\njulia> card(class=\"text-white\", style=\"background: radial-gradient(circle, #35a2ff 0%, #014a88 100%); width: 30%\", [\n          card_section(\"lorLorem Ipsum is simply dummy text of the printing \n          and typesetting industry\")\n       ])\n\n\n\nArguments\n\n\n\ntag::String - HTML tag to render ex. \"div\", \"form\"\nhorizontal::Bool - Display a horizontal section (will have no padding and can contain other card_section)\n\n\n\n\n\n","category":"function"},{"location":"API/cards.html#StippleUI.Cards.card_actions","page":"Cards","title":"StippleUI.Cards.card_actions","text":"\n\nExamples\n\n\n\ncard_actions()\n\nModel\n\njulia> @vars CardModel begin\n          lorem::R{String} = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n       end\n\nView\n\njulia> card(class=\"my-card bg-secondary text-white\", [\n          card_section([\n            Html.div(\"Our Changing Planet\", class=\"text-h6\"),\n            Html.div(\"by John Doe\", class=\"text-subtitle2\")\n          ]),\n          card_section(\"{{ lorem }}\"),\n          card_actions([\n            btn(flat=true, \"Action 1\"),\n            btn(flat=true, \"Action2\")\n          ])\n        ])\n\n\n\nArguments\n\n\n\nalign::String - Specify how to align the actions (\"left\", \"center\", \"right\", \"between\", \"around\", \"evenly\", \"stretch\")\nvertical:Bool - Display actions one below the other\n\n\n\n\n\n","category":"function"},{"location":"API/radios.html","page":"Radios","title":"Radios","text":"CurrentModule = Radios","category":"page"},{"location":"API/radios.html","page":"Radios","title":"Radios","text":"radio","category":"page"},{"location":"API/radios.html#StippleUI.Radios.radio","page":"Radios","title":"StippleUI.Radios.radio","text":"radio(label::AbstractString = \"\", fieldname::Union{Symbol,Nothing} = nothing, args...; kwargs...)\n\nThe radio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars RadioModel begin\n         shape::R{String} = \"line\"\n       end\n\nView\n\njulia> radio(\"Line\", :shape, val=\"line\")\njulia> radio(\"Rectangle\", :shape, val=\"rectange\")\njulia> radio(\"Ellipse\", :shape, val=\"ellipse\")\njulia> radio(\"Polygon\", :shape, val=\"polygon\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL ex. car_id\nkeep-color::Bool - Should the color (if specified any) be kept when checkbox is unticked?\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value\nLabel\nleftlabel::Bool - Label (if any specified) should be displayed on the left side of the checkbox\nState\ndisable::Bool - Put component in disabled mode\nStyle\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. 16px 2rem xs md\ncolor::String - Color name for component from the Color Palette ex. primary teal-10\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"API/intersections.html","page":"Intersections","title":"Intersections","text":"CurrentModule = Intersections","category":"page"},{"location":"API/intersections.html","page":"Intersections","title":"Intersections","text":"intersection","category":"page"},{"location":"API/innerloaders.html","page":"InnerLoaders","title":"InnerLoaders","text":"CurrentModule = InnerLoaders","category":"page"},{"location":"API/innerloaders.html","page":"InnerLoaders","title":"InnerLoaders","text":"innerloader","category":"page"},{"location":"API/scrollareas.html","page":"ScrollAreas","title":"ScrollAreas","text":"CurrentModule = ScrollAreas","category":"page"},{"location":"API/scrollareas.html","page":"ScrollAreas","title":"ScrollAreas","text":"scrollarea","category":"page"},{"location":"API/scrollareas.html#StippleUI.ScrollAreas.scrollarea","page":"ScrollAreas","title":"StippleUI.ScrollAreas.scrollarea","text":"  scrollarea(args...; kwargs...)\n\nThe scrollarea component offers a neat way of customizing the scrollbars by encapsulating your content. Think of it as a DOM element which has overflow: auto, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top.\n\n\n\nExamples\n\n\n\nView\n\njulia> StippleUI.scrollarea(style=\"height: 200px; max-width: 300px;\", [\n          Html.div(\"Stipple is a reactive UI library for building interactive \n          data applications in pure Julia. It uses Genie.jl (on the server side)\n          and Vue.js (on the client). Stipple uses a high performance MVVM \n          architecture, which automatically synchronizes the state two-way\n          (server -> client and client -> server) sending only JSON data over\n          the wire. The Stipple package provides the fundamental communication\n          layer, extending Genie's HTML API with a reactive component.\")\n       ])\n\n\n\nArguments\n\n\n\nBehaviour\nvisible::Bool - Manually control the visibility of the scrollbar; Overrides default mouse over/leave behavior\ndelay::Union{Int, String} - When content changes, the scrollbar appears; this delay defines the amount of time (in milliseconds) before scrollbars disappear again (if component is not hovered) default 1000 ex. 500 delay!=\"500\nhorizontal::Bool - Changes the default axis to horizontal instead of vertical (which is default) for getScrollPosition, getScrollPercentage, setScrollPosition, and setScrollPercentage\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value 0 100\nStyle\ndark::Bool - Notify the component that the background is a dark color\nbarstyle::Union{Vector, String, Dict} - Object with CSS properties and values for custom styling the scrollbars (both vertical and horizontal) ex. barstyle!=\"{ borderRadius: '5px', background: 'red', opacity: 1 }\"\ncontentstyle::Union{Vector, String, Dict} - Object with CSS properties and values for styling the container of scrollarea\n\n\n\n\n\n","category":"function"},{"location":"API/tooltips.html","page":"Tooltips","title":"Tooltips","text":"CurrentModule = Tooltips","category":"page"},{"location":"API/tooltips.html","page":"Tooltips","title":"Tooltips","text":"tooltip","category":"page"},{"location":"API/tooltips.html#StippleUI.Tooltips.tooltip","page":"Tooltips","title":"StippleUI.Tooltips.tooltip","text":"tooltip(args...; kwargs...)\n\n\n\n\n\ntooltip(fieldname::Symbol, args...; kwargs...)\n\nThe tooltip component is to be used when you want to offer the user more information about a certain area in your App. When hovering the mouse over the target element (or quickly tapping on mobile platforms), the tooltip will appear.\n\n\n\nExamples\n\n\n\nView\n\njulia> btn(\"Hover me\", color=\"primary\", [\n          tooltip(\"Some text as content of Tooltip\")\n       ])\njulia> Html.div(class=\"inline bg-amber rounded-borders cursor-pointer\", style=\"max-width: 300px\", [\n          Html.div(class=\"fit flex flex-center text-center non-selectable q-pa-md\", \"I am groot!<br>(Hover me!)\", [\n            tooltip(\"I am groot!\")\n       ])\njulia> \n])\n\n\n\nArguments\n\n\n\nBehaviour\ntransitionshow::String - Support for inbuilt transitions ex. fade slide-down\ntransitionhide::String - Support for inbuilt transitions ex. fade slide-down\nscrolltarget::String - CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one ex. scrolltarget=\".scroll-target-class\" scrolltarget=\"#scroll-target-id\" scrolltarget=\"body\"\ntarget::Union{String, Bool} - Configure a target element to trigger Tooltip toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) it attaches the events to the specified DOM element (if it exists) ex. target=\".my-parent\" target!=false\nnoparentevent::Bool - Skips attaching events to the target DOM element (that trigger the element to get shown)\ndelay::Int - Configure Tooltip to appear with delay. default value. 0 ex. delay!=\"500\"\nhidedelay::Int - Configure Tooltip to disappear with delay. default value. 0 ex. hidedelay!=\"600\"\nContent\nmaxheight::String - The maximum height of the Tooltip; Size in CSS units, including unit name ex. 16px 2rem\nmaxwidth::String - The maximum width of the Tooltip; Size in CSS units, including unit name ex. 16px 2rem\nPosition\nanchor::String - Two values setting the starting position or anchor point of the Tooltip relative to its target ex. top left top middle top right top start top end center left center middle center right center start center end bottom left bottom middle bottom right bottom start bottom end\nself::String - Two values setting the Tooltip's own position relative to its target ex. top left top middle top right top start top end center left center middle center right center start center end bottom left bottom middle bottom right bottom start bottom end\noffset::Vector - An array of two numbers to offset the Tooltip horizontally and vertically in pixels. default value. [14,14] ex. [5, 10]\nStyle\ncontentclass::Union{Vector, String, Dict} - Class definitions to be attributed to the content eg. my-special-class contentclass!=\"{ 'my-special-class': <condition> }\"\ncontentstyle::Union{Vector, String, Dict} - Style definitions to be attributed to the content eg. background-color: #ff0000 contentstyle!=\"{ color: '#ff0000' }\"\n\n\n\n\n\n","category":"function"},{"location":"API/buttons.html","page":"Buttons","title":"Buttons","text":"CurrentModule = Buttons","category":"page"},{"location":"API/buttons.html","page":"Buttons","title":"Buttons","text":"btn\nBtn\nbtngroup","category":"page"},{"location":"API/buttons.html#StippleUI.Buttons.btn","page":"Buttons","title":"StippleUI.Buttons.btn","text":"Stipple has a component called btn which is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect baked in (which can be disabled).\n\nThe button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.\n\nWhen not disabled or spinning, btn emits a @click event, as soon as it is clicked or tapped.\n\nExamples\n\njulia> btn(\"Move Left\", color = \"primary\", icon = \"mail\", @click(\"press_btn = true\"))\n\njulia> btn(\"Go to Hello World\", color = \"red\", type = \"a\", href = \"hello\", icon = \"map\", iconright = \"send\")\n\njulia> btn(\"Connect to server!\", color=\"green\", textcolor=\"black\", @click(\"btnConnect=!btnConnect\"), [\n          tooltip(contentclass=\"bg-indigo\", contentstyle=\"font-size: 16px\", \n          style=\"offset: 10px 10px\",  \"Ports bounded to sockets!\")]\n       )       \n\n\n\nArguments\n\n\n\nBehavior\nloading::Bool - Put button into loading state (displays a spinner – can be overridden by using a 'loading' slot)\npercentage::Union{Int, Float64} - Percentage (0.0 < x < 100.0); To be used along 'loading' prop; Display a progress bar on the background ex. 23\ndarkpercentage::Bool - Progress bar on the background should have dark color; To be used along with 'percentage' and 'loading' props\nContent\nlabel::Union{String, Int} - The text that will be shown on the button ex. Button Label\nicon::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\niconright::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\nnocaps::Bool - Avoid turning label text into caps (which happens by default)\nnowrap::Bool - Avoid label text wrapping\nalign::String - Label or content alignment default. center accepted values. left right center around between evenly\nstack::Bool - Stack icon and label vertically instead of on same line (like it is by default)\nstretch::Bool - When used on flexbox parent, button will stretch to parent's height\nGeneral\ntype::String - 1) Define the button native type attribute (submit, reset, button) or 2) render component with <a> tag so you can access events even if disable or 3) Use 'href' prop and specify 'type' as a media tag default. button ex. a submit reset button image/png href=\"https://some-site.net\" target=\"_blank\"\ntabindex::Union{Int, String} - Tabindex HTML attribute value\nNavigation\nhref::String - Native <a> link href attribute; Has priority over the 'to' and 'replace' props ex. https://quasar.dev href=\"https://quasar.dev\" target=\"_blank\"\ntarget::String - Native <a> link target attribute; Use it only with 'to' or 'href' props ex. _blank _self _parent _top\nState\nloading::Bool - Put button into loading state (displays a spinner – can be overridden by using a 'loading' slot)\ndisable::Bool - Put component in disabled mode\nStyle\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. 16px 2rem xs md\nripple::Union{Bool, Dict} - Configure material ripple (disable it by setting it to 'false' or supply a config object) default. true ex. false { \"early\" => true, \"center\" => true, \"color\" => \"teal\", \"keyCodes\" => [] }\noutline::Bool - Use outline design\nflat::Bool - Use flat design\nunelevated::Bool - Remove shadow\nrounded::Bool - Applies a more prominent border-radius for a squared shape button\npush::Bool - Use 'push' design\nglossy::Bool - Applies a glossy effect\nfab::Bool - Makes button size and shape to fit a Floating Action Button\nfabmini::Bool - Makes button size and shape to fit a small Floating Action Button\npadding::String - Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set\ncolor::String - Color name for component from the Color Palette eg. primary teal-10\ntextcolor::String - Overrides text color (if needed); Color name from the Color Palette eg. primary teal-10\ndense::Bool - Dense mode; occupies less space\nround::Bool - Makes a circle shaped button\n\n\n\n\n\n","category":"function"},{"location":"API/buttons.html#StippleUI.Buttons.btngroup","page":"Buttons","title":"StippleUI.Buttons.btngroup","text":"You can conveniently group btn and btndropdown using btngroup. Be sure to check those component’s respective pages to see their props and methods.\n\n\n\nArguments\n\n\n\nContent\nspread::Bool - Spread horizontally to all available space\nstretch::Bool - When used on flexbox parent, buttons will stretch to parent's height\nStyle\noutline::Bool - Use 'outline' design for buttons\nflat::Bool - Use 'flat' design for buttons\nunelevated::Bool - Remove shadow from buttons\nrounded::Bool - Applies a more prominent border-radius for squared shape buttons\npush::Bool - Use 'push' design for buttons\nglossy::Bool - Applies a glossy effect\n\n\n\n\n\n","category":"function"},{"location":"API/ratings.html","page":"Ratings","title":"Ratings","text":"CurrentModule = Ratings","category":"page"},{"location":"API/ratings.html","page":"Ratings","title":"Ratings","text":"rating","category":"page"},{"location":"API/ratings.html#StippleUI.Ratings.rating","page":"Ratings","title":"StippleUI.Ratings.rating","text":"rating(fieldname::Union{Symbol,Nothing} = nothing,args...; kwargs...)\n\nRating is a Component which allows users to rate items, usually known as “Star Rating”.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars RatingModel begin\n          myrating::R{Int} = 3\n       end\n\n\nView\n\njulia> rating(:myrating,size=\"1.5em\",icon=\"thumb_up\")\njulia> rating(:myrating, size=\"2em\",color=\"red-7\",icon=\"favorite_border\")\njulia> rating(:myrating, size=\"2.5em\", color=\"purple-4\", icon=\"create\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL car_id\nContent\nicon::Union{String, Vector} - Icon name; make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\niconselected::Union{String, Vector} - Icon name to be used when selected (optional); make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\niconhalf::Union{String, Vector} - Icon name to be used when selected (optional); make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\nLabel\nmax::Union{Int, String} - Number of icons to display ex. 3 max=\"5\"\nModel\nnoreset::Bool - When used, disables default behavior of clicking/tapping on icon which represents current model value to reset model to 0\nState\nreadonly::Bool - Put component in readonly mode\ndisable::Bool - Put component in disabled mode\nStyle\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. 16px 2rem md xs\ncolor::Union{String, Vector} - Color name for component from the Color Palette; v1.5.0+: If an array is provided each rating value will use the corresponding color in the array (0 based) ex. primary primary teal-10 [\"accent\", \"grey-7\"]\ncolorselected::Union{String, Vector} - Color name from the Quasar Palette for selected icons primary teal-10\ncolorhalf::Union{String, Vector} - Color name from the Color Palette ex. primary teal-10\nnodimming::Bool - Does not lower opacity for unselected icons\n\n\n\n\n\n","category":"function"},{"location":"API/dialogs.html","page":"Dialogs","title":"Dialogs","text":"CurrentModule = Dialogs","category":"page"},{"location":"API/dialogs.html","page":"Dialogs","title":"Dialogs","text":"dialog","category":"page"},{"location":"API/dialogs.html#StippleUI.Dialogs.dialog","page":"Dialogs","title":"StippleUI.Dialogs.dialog","text":"dialog()\n\nThe dialog` component is a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).\n\nTIP: Dialogs can also be used as a globally available method for more basic use cases, like the native JS alert(), prompt(), etc.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars DialogModel begin\n         show_dialog::R{Bool} = false\n       end\n\nView\n\njulia> Html.div(class=\"q-pa-md q-gutter-sm\", [\n        btn(\"Alert\", color=\"primary\", @click(\"show_dialog = true\")),\n        StippleUI.dialog(:show_dialog, [\n          card([\n            card_section(Html.div(class=\"text-h6\", \"Alert\")),\n            card_section(class=\"q-pt-none\", \"Lorem ipsum dolor sit amet consectetur adipisicing elit. \n            Rerum repellendus sit voluptate voluptas eveniet porro. Rerum blanditiis perferendis totam, \n            ea at omnis vel numquam exercitationem aut, natus minima, porro labore.\")\n          ])\n        ])\n      ])\n\n\n\nArguments\n\n\n\nBehaviour\npersistent::Bool - User cannot dismiss Dialog if clicking outside of it or hitting ESC key; Also, an app route change won't dismiss it\nnoesc::Bool - User cannot dismiss Dialog by hitting ESC key; No need to set it if 'persistent' property is also set\nnobackdrop::Bool - User cannot dismiss Dialog by clicking outside of it; No need to set it if 'persistent' property is also set\nautoclose::Bool - Any click/tap inside of the dialog will close it\ntransitionshow::String - One of the embedded transitions eg. \"fade\", \"slide-down\"\ntransitionhide::String - One of the embedded transitions eg. \"fade\", \"slide-down\"\nnorefocus::Bool - (Accessibility) When Dialog gets hidden, do not refocus on the DOM element that previously had focus\nnofocus::Bool - (Accessibility) When Dialog gets shown, do not switch focus on it\nContent\nseamless::Bool - Put Dialog into seamless mode; Does not use a backdrop so user is able to interact with the rest of the page too\nmaximized::Bool - Put Dialog into maximized mode\nfullwidth::Bool - Dialog will try to render with same width as the window\nfullheight::Bool - Dialog will try to render with same height as the window\nposition::String - Stick dialog to one of the sides (\"top\", \"right\", \"bottom\" or \"left\")\nStyle\ncontentclass::Union{Array, String} - Class definitions to be attributed to the content eg. \"my-special-class\" :content-class=\"{ 'my-special-class': <condition> }\"\ncontentstyle::Union{Array, String} - Style definitions to be attributed to the content eg. \"background-color: #ff0000\" :content-style=\"{ color: '#ff0000' }\"\nsquare::Bool - Forces content to have squared borders\n\n\n\n\n\n","category":"function"},{"location":"API/selects.html","page":"Selects","title":"Selects","text":"CurrentModule = Selects","category":"page"},{"location":"API/selects.html","page":"Selects","title":"Selects","text":"select","category":"page"},{"location":"API/selects.html#Genie.Renderer.Html.select","page":"Selects","title":"Genie.Renderer.Html.select","text":"select(fieldname::Symbol, args...; options::Symbol, kwargs...)\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars SelectModel begin\n          model::R{Vector{String}} = []\n          networks::R{Vector{String}} = [\"Google\", \"Facebook\", \"Twitter\", \"Pinterest\", \"Reddit\"]\n       end\n\nView\n\njulia> select(:model, options= :networks, useinput=true, multiple=true, clearable = true, filled = true, counter = true, usechips = true, label=\"Social Networks\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists ex. car-id car-id\nvirtualscrollhorizontal::Bool - Make virtual list work in horizontal mode\nerror::Bool - Does field have validation errors?\nrules::Vector - Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules  rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"\nreactiverules::Bool - By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it\nlazyrules::Union{Bool, String} - If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper form submits itself ex. (Boolean) true (Boolean) false ondemand\nloading::Bool - Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.\nclearable::Bool - Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null\nautofocus::Bool - Focus field on initial component render\nfor::String - Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well myFieldsId\nhidedropdownicon::Bool - Hide dropdown icon\nfillinput::Bool - Fills the input with current value; Useful along with 'hideselected'; Does NOT works along with 'multiple' selection\nnewvaluemode::String - Enables creation of new values and defines behavior when a new value is added: 'add' means it adds the value (even if possible duplicate), 'add-unique' adds only unique values, and 'toggle' adds or removes the value (based on if it exists or not already); When using this prop then listening for newvalue becomes optional (only to override the behavior defined by newvaluemode)  ex. add add-unique toggle\nautocomplete::String - Autocomplete attribute for field ex. autocomplete=\"country\"\ntransitionshow::String - Transition when showing the menu/dialog; One of embedded transitions ex. fade slide-down\ntransitionhide::String - Transition when hiding the menu/dialog; One of embedded transitions ex. fade slide-down\nbehavior::String - Overrides the default dynamic mode of showing as menu on desktop and dialog on mobiles default menu dialog\nContent\ntablecolspan::Union{Int, String} - The number of columns in the table (you need this if you use table-layout: fixed) ex. tablecolspan=\"12\"\nerrormessage::String - Validation error message (gets displayed only if 'error' is set to 'true') ex. Username must have at least 5 characters\nnoerroricon::Bool - Hide error icon when there is an error\nlabel::Union{String,Symbol} - A text label that will “float” up above the input field, once the field gets focus ex. Username\nstacklabel::Bool - Label will be always shown above the field regardless of field content (if any)\nhint::String - Helper (hint) text which gets placed below your wrapped form component ex. Fill in between 3 and 12 characters\nhidehint::Bool - Hide the helper (hint) text when field doesn't have focus\nprefix::String - Prefix ex. $\nsuffix::String - Suffix ex. @gmail.com\nloading::Bool - Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.\nclearable::Bool - Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null\nclearicon::String - Custom icon to use for the clear button when using along with 'clearable' attribute ex. close\nlabelslot::Bool - Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set\nbottomslots::Bool - Enables bottom slots ('error', 'hint', 'counter')\ncounter::Bool - Show an automatic counter on bottom right\ndropdownicon::String - Icon name; ; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. map ion-add img=https://cdn.quasar.dev/logo/svg/quasar-logo.svg img=path/to/some_image.png\nuseinput::Bool - Use an input tag where users can type\ninputdebounce::Union{Int, String} - Debounce the input model update with an amount of milliseconds ex. 500 600\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value ex. 0 100\nModel\nmultiple::Bool - Allow multiple selection; Model must be Array\nemitvalue::Bool - Update model with the value of the selected option instead of the whole option\nOptions\noptions::Vector - Available options that the user can select from. For best performance freeze the list of options ex. options=[ 'BMW', 'Samsung Phone' ]\noptionvalue::String - Property of option which holds the 'value'; If using a function then for best performance, reference it from your scope and do not define it inline ex. optionvalue=modelNumber optionvalue=\"(item) => item === null ? null : item.modelNumber\"\noptionlabel::Union{String,Symbol} - Property of option which holds the 'label'; If using a function then for best performance, reference it from your scope and do not define it inline ex. optionlabel=itemName optionlabel=\"(item) => item === null ? null : item.itemName\"\noptiondisable::String - Property of option which tells it's disabled; The value of the property must be a Boolean; If using a function then for best performance, reference it from your scope and do not define it inline ex. optiondisable=cannotSelect optiondisable=\"(item) => item === null ? null : item.cannotSelect\"\noptionsdense::Bool - Dense mode for options list; occupies less space\noptionsdark::Bool - Options menu will be colored with a dark color\noptionsselectedclass::String - CSS class name for options that are active/selected; Set it to an empty string to stop applying the default (which is text-* where * is the 'color' prop value) ex. text-orange\noptionssanitize::Bool - Force use of textContent instead of innerHTML to render options; Use it when the options might be unsafe (from user input); Does NOT apply when using 'option' slot!\noptionscover::Bool - Expanded menu will cover the component (will not work along with useinput attribute for obvious reasons)\nmenushrink::Bool - Allow the options list to be narrower than the field (only in menu mode)\nmapoptions::Bool - Try to map labels of model from options Vector; has a small performance penalty; If you are using emit-value you will probably need to use map-options to display the label text in the select field rather than the value; Refer to the 'Affecting model' section above\nPosition\nmenuanchor::String - Two values setting the starting position or anchor point of the options list relative to the field (only in menu mode) ex. top left top middle top right top start top end center left center middle center right center start center end bottom left bottom middle bottom right bottom start bottom end\nmenuself::String - Two values setting the options list's own position relative to its target (only in menu mode) ex. top left etc\nmenuoffset::Vector - An array of two numbers to offset the options list horizontally and vertically in pixels (only in menu mode) ex. [8, 8]\nSelection\nmultiple::Bool - Allow multiple selection; Model must be Array\ndisplayvalue::Union{Int, String} - Override default selection string, if not using selected slot/scoped slot and if not using usechips attribute\ndisplayvaluesanitize::Bool - Force use of textContent instead of innerHTML to render selected option(s); Use it when the selected option(s) might be unsafe (from user input); Does NOT apply when using selected or selecteditem slots!\nhideselected::Bool - Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non multiple Selects\nmaxvalues::Union{Int, String} - Allow a maximum number of selections that the user can do ex. 5\nusechips::Bool - Use chip component to show what is currently selected\nState\ndisable::Bool - Put component in disabled mode\nreadonly::Bool - Put component in readonly mode\nStyle\nlabelcolor::String - Color name for the label from the Color Palette; Overrides the color prop; The difference from color prop is that the label will always have this color, even when field is not focused ex. primary teal-10\ncolor::String - Color name for component from the Color Palette\nbgcolor::String - Background color name for component from the Color Palette\ndark::Bool - Notify the component that the background is a dark color\nfilled::Bool - Use filled design for the field\noutlined::Bool - Use outlined design for the field\nborderless::Bool - Use borderless design for the field\nstandout::Union{Bool, String} - Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones) ex. standout standout=\"bg-primary text-white\"\nhidebottomspace::Bool - Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content\nrounded::Bool - Applies a small standard border-radius for a squared shape of the component\nsquare::Bool - Remove border-radius so borders are squared; Overrides rounded prop/attribute\ndense::Bool - Dense mode; occupies less space\nitemaligned::Bool - Match inner content alignment to that of item component\npopupcontentclass::String - Class definitions to be attributed to the popup content ex. my-special-class\npopupcontentstyle::Union{Vector, String, Dict} - Style definitions to be attributed to the popup content ex. background-color: #ff0000 popupcontentstyle!=\"{ backgroundColor: '#ff0000' }\"\ninputclass::Union{Vector, String, Dict} - Class definitions to be attributed to the underlying input tag ex. my-special-class inputclass!=\"{ 'my-special-class': <condition> }\"\ninputstyle::Union{Vector, String, Dict} - Style definitions to be attributed to the underlying input tag ex. background-color: #ff0000 inputstyle!=\"{ backgroundColor: '#ff0000' }\"\nVirtual-scroll\nvirtualscrollslicesize::Union{Int, String} - Minimum number of items to render in the virtual list ex. virtualscrollslicesize=\"60\" 30\nvirtualscrollsliceratiobefore::Union{Int, String} - Ratio of number of items in visible zone to render before it ex. virtualscrollsliceratiobefore=\"30\" 30\nvirtualscrollsliceratioafter::Union{Int, String} - Ratio of number of items in visible zone to render after it ex. virtualscrollsliceratioafter=\"0.3\"\nvirtualscrollitemsize::Union{Int, String} - Default size in pixels (height if vertical, width if horizontal) of an item; This value is used for rendering the initial list; Try to use a value close to the minimum size of an item  ex. virtualscrollitemsize=\"48\"\nvirtualscrollstickysizestart::Union{Int, String} - Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the start of the list; A correct value will improve scroll precision ex. 0 virtualscrollstickysizestart=\"23\nvirtualscrollstickysizeend::Union{Int, String} - Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the end of the list; A correct value will improve scroll precision ex. 0\ntablecolspan::Union{Int, String} - The number of columns in the table (you need this if you use table-layout: fixed) ex. tablecolspan=\"3\"\n\n\n\n\n\n","category":"function"},{"location":"API/forms.html","page":"Forms","title":"Forms","text":"CurrentModule = Forms","category":"page"},{"location":"API/forms.html","page":"Forms","title":"Forms","text":"form","category":"page"},{"location":"API/forms.html#StippleUI.Forms.form","page":"Forms","title":"StippleUI.Forms.form","text":"form(args...; noresetfocus::Bool = false, kwargs...)\n\nThe form component renders a <form> DOM element and allows you to easily validate child form components (like input, select or your field wrapped components) that have the internal validation (NOT the external one) through rules associated with them.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars FormModel begin\n          name::R{String} = \"\"\n          age::R{Int} = 0\n          warin::R{Bool} = true\n       end\n\nView\n\njulia> StippleUI.form(action = \"/sub\", method = \"POST\", [\n          textfield(\"What's your name *\", :name, name = \"name\", @iif(:warin), :filled, hint = \"Name and surname\", \"lazy-rules\",\n            rules = \"[val => val && val.length > 0 || 'Please type something']\"\n          ),\n          numberfield(\"Your age *\", :age, name = \"age\", \"filled\", :lazy__rules,\n            rules = \"[val => val !== null && val !== '' || 'Please type your age',\n              val => val > 0 && val < 100 || 'Please type a real age']\"\n          ),\n          btn(\"submit\", type = \"submit\", color = \"primary\")\n       ])\n\n\n\nArguments\n\n\n\nautofocus::Bool - Focus first focusable element on initial component render\nnoerrorfocus::Bool - Do not try to focus on first component that has a validation error when submitting form\nnoresetfocus::Bool - Do not try to focus on first component when resetting form\ngreedy::Bool - Validate all fields in form (by default it stops after finding the first invalid field with synchronous validation)\n\n\n\n\n\n","category":"function"},{"location":"API/chips.html","page":"Chips","title":"Chips","text":"CurrentModule = Chips","category":"page"},{"location":"API/chips.html","page":"Chips","title":"Chips","text":"chip","category":"page"},{"location":"API/chips.html#StippleUI.Chips.chip","page":"Chips","title":"StippleUI.Chips.chip","text":"  chip(args...; kwargs...)\n\nThe chip component is basically a simple UI block entity, representing for example more advanced underlying data, such as a contact, in a compact way.\n\nChips can contain entities such as an avatar, text or an icon, optionally having a pointer too. They can also be closed or removed if configured so.\n\n\n\nExamples\n\n\n\nView\n\njulia> chip(\"Add to calendar\", icon=\"event\")\n\n\n\nArguments\n\n\n\nContent\nicon::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. \"map\" \"ion-add\" \"img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" \"img:path/to/some_image.png\"\niconright::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. \"map\" \"ion-add\" \"img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" \"img:path/to/some_image.png\"\niconremove::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. \"map\" \"ion-add\" \"img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" \"img:path/to/some_image.png\"\niconselected::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. \"map\" \"ion-add\" \"img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" \"img:path/to/some_image.png\"\nlabel::Union{String, Int} - Chip's content as string; overrides default slot if specified ex. \"Joe Doe\" \"Book\"\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value ex. 0 100\nModel\nvalue::Bool - Model of the component determining if chip should be rendered or not default. true\nselected::Bool - Model for chip if it's selected or not NOTE. \".sync\" modifier required!\nState\nclickable::Bool - Is chip clickable? If it's the case, then it will add hover effects and emit 'click' events\nremovable::Bool - Is chip removable? If it's the case, then it will add a close button and emit 'remove' events\ndisable::Bool - Put component in disabled mode\nStyle\nripple::Union{Bool, Dict} - Configure material ripple (disable it by setting it to 'false' or supply a config object) default. true ex. false { early: true, center: true, color: 'teal', keyCodes: [] }\ndense::Bool - Dense mode; occupies less space\nsize::String - chip size name or a CSS unit including unit name ex. \"xs\" \"sm\" \"md\" \"lg\" \"xl\" \"1rem\"\ndark::Bool - Notify the component that the background is a dark color\ncolor::String - Color name for component from the Color Palette eg. \"primary\" \"teal-10\"\nsquare::Bool - Sets a low value for border-radius instead of the default one, making it close to a square\noutline::Bool - Display using the 'outline' design\n\n\n\n\n\n","category":"function"},{"location":"API/badges.html","page":"Badges","title":"Badges","text":"CurrentModule = Badges","category":"page"},{"location":"API/badges.html","page":"Badges","title":"Badges","text":"badge\nBadge","category":"page"},{"location":"API/badges.html#StippleUI.Badges.badge","page":"Badges","title":"StippleUI.Badges.badge","text":"badge()\n\nThe badge component allows you to create a small badge for adding information like contextual data that needs to stand out and get noticed. It is also often useful in combination with other elements like a user avatar to show a number of new messages.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars BadgeModel begin\n          myicon = \"bluetooth\"\n       end\n\nView\n\njulia> Html.div(\"Badge\", class=\"text-h6\", [\n          badge(\"1.0.0+\", color=\"primary\")\n       ])\n\n\n\nArguments\n\n\n\nContent\nfloating::Bool - Tell badge if it should float to the top right side of the relative positioned parent element or not\ntransparent::Bool - Applies a 0.8 opacity; Useful especially for floating badge\nmultiline::Bool - Content can wrap to multiple lines\nlabel::Union{String, Int} - Badge's content as string; overrides default slot if specified ex. \"John Doe\" 22\nalign::String - Sets vertical-align CSS attribute\noutline::Bool - Use 'outline' design (colored text and borders only)\nStyle\ncolor::String - Color name for component from the Color Palette ex. \"primary\" \"teal-10\"\ntextcolor::String - Overrides text color (if needed); Color name from the Color Palette ex. \"primary\" \"teal-10\"\nrounded::Bool - Makes a rounded shaped badge\n\n\n\n\n\n","category":"function"},{"location":"API/splitters.html","page":"Splitters","title":"Splitters","text":"CurrentModule = Splitters","category":"page"},{"location":"API/splitters.html","page":"Splitters","title":"Splitters","text":"splitter","category":"page"},{"location":"API/splitters.html#StippleUI.Splitters.splitter","page":"Splitters","title":"StippleUI.Splitters.splitter","text":"splitter(fieldname::Symbol, args...; kwargs...)\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars SplitterModel begin\n            splitterM::R{Int} = 50\n       end\n\nView\n\njulia> splitter(:splitterM, style=\"height: 400px\", [\n        template(\"\", \"v-slot:before\", [\n          Html.div(class=\"q-pa-md\", [\n            Html.div(\"Before\", class=\"text-h4 q-mb-md\"),\n            Html.div(\"{{ n }}. Lorem ipsum dolor sit, amet consectetur adipisicing elit.\n               Quis praesentium cumque magnam odio iure quidem, quod illum numquam possimus\n               obcaecati commodi minima assumenda consectetur culpa fuga nulla ullam. In, libero.\",\n              class = \"q-my-md\",\n              @recur(:\"n in 20\"), key! = \"n\")\n          ])\n        ]),\n        template(\"\", \"v-slot:after\", [\n          Html.div(class=\"q-pa-md\", [\n            Html.div(\"After\", class=\"text-h4 q-mb-md\")\n              Html.div(\"{{ n }}. Lorem ipsum dolor sit, amet consectetur adipisicing elit.\n               Quis praesentium cumque magnam odio iure quidem, quod illum numquam possimus\n               obcaecati commodi minima assumenda consectetur culpa fuga nulla ullam. In, libero.\",\n              class = \"q-my-md\",\n              @recur(:\"n in 20\"), key! = \"n\")\n          ])\n        ])\n       ])\n\n\n\nArguments\n\n\n\nContent\nhorizontal::Bool - Allows the splitter to split its two panels horizontally, instead of vertically\nlimits::Vector - An array of two values representing the minimum and maximum split size of the two panels; When 'px' unit is set then you can use Infinity as the second value to make it unbound on the other side\nModel\nreverse::Bool - Apply the model size to the second panel (by default it applies to the first)\nunit::String - CSS unit for the model\nemitimmediately::Bool - Emit model while user is panning on the separator\nlimits::Vector - An array of two values representing the minimum and maximum split size of the two panels; When 'px' unit is set then you can use Infinity as the second value to make it unbound on the other side\nState\ndisable::Bool - Put component in disabled mode\nStyle\nclassbefore::Union{Vector,String,Dict} - Class definitions to be attributed to the 'before' panel ex. \"bg-deep-orange\"\nclassafter::Union{Vector,String,Dict} - Class definitions to be attributed to the 'after' panel ex. \"bg-deep-orange\"\nseparatorclass::Union{Vector,String,Dict} - Class definitions to be attributed to the splitter separator ex. \"bg-deep-orange\"\nseparatorstyle::Union{Vector,String,Dict} - Style definitions to be attributed to the splitter separator ex. \"border-color: #ff0000;\"\ndark::Bool - Applies a default lighter color on the separator; To be used when background is darker; Avoid using when you are overriding through separator-class or separator-style props \n\n\n\n\n\n","category":"function"},{"location":"API/avatars.html","page":"Avatars","title":"Avatars","text":"CurrentModule = Avatars","category":"page"},{"location":"API/avatars.html","page":"Avatars","title":"Avatars","text":"avatar","category":"page"},{"location":"API/icons.html","page":"Icons","title":"Icons","text":"CurrentModule = Icons","category":"page"},{"location":"API/icons.html","page":"Icons","title":"Icons","text":"icon","category":"page"},{"location":"API/icons.html#StippleUI.Icons.icon","page":"Icons","title":"StippleUI.Icons.icon","text":"icon(name::Union{String,Symbol}, args...; content::Union{String,Vector,Function} = \"\", kwargs...)\n\nStipple supports out of the box: Material Icons , Font Awesome, Ionicons, MDI, Eva Icons, Themify Icons, Line Awesome and Bootstrap Icons.\n\nFurthermore you can add support by yourself for any icon lib.\n\n\n\nExamples\n\n\n\nView\n\njulia> icon(\"font_download\", class=\"text-primary\", style=\"font-size: 32px;\")\njulia> icon(\"warning\", class=\"text-red\", style=\"font-size:4rem;\")\njulia> icon(\"format_size\", style=\"color: #ccc; font-size: 1.4em;\")\njulia> icon(\"print\", class=\"text-teal\", style=\"font-size: 4.4em;\")\njulia> icon(\"today\", class=\"text-orange\", style=\"font-size: 2em;\")\njulia> icon(\"style\", style=\"font-size: 3em;\")\n\n\n\nArguments\n\n\n\nContent\ntag::String - HTML tag to render, unless no icon is supplied or it's an svg icon ex. div i\nleft::Bool - Useful if icon is on the left side of something: applies a standard margin on the right side of Icon\nright::Bool - Useful if icon is on the right side of something: applies a standard margin on the left side of Icon\nModel\nname::String - Icon name; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\nStyle\nsize::String - Size in CSS units, including unit name or standard size name 16px 2rem xs md\ncolor::String - Color name for component from the Color Palette eg. primary teal-10\n\n\n\n\n\n","category":"function"},{"location":"API/timelines.html","page":"Timelines","title":"Timelines","text":"CurrentModule = Timelines","category":"page"},{"location":"API/timelines.html","page":"Timelines","title":"Timelines","text":"timeline\ntimelineentry","category":"page"},{"location":"API/timelines.html#StippleUI.Timelines.timeline","page":"Timelines","title":"StippleUI.Timelines.timeline","text":"  timeline(args...; kwargs...)\n\nThe timeline component displays a list of events in chronological order. It is typically a graphic design showing a long bar labelled with dates alongside itself and usually events. Timelines can use any time scale, depending on the subject and data.      \n\n\n\nExamples\n\n\n\nView\n\njulia> Html.div(class=\"q-px-lg q-pb-md\", [\n            timeline(color=\"secondary\", [\n            timelineentry(\"Timeline Heading\", heading=true),\n            timelineentry(title=\"Event Title\", subtitle=\"February 22, 1986\", [\n            Html.div(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n                  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n                  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n                  deserunt mollit anim id est laborum.\")\n            ]),\n            timelineentry(title=\"Event Title\", subtitle=\"February 21, 1986\", icon=\"delete\",[\n            Html.div(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n                  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n                  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n                  deserunt mollit anim id est laborum.\")\n            ]),\n            timelineentry(title=\"Event Title\",\n            subtitle=\"February 22, 1986\",\n            avatar=\"https://cdn.quasar.dev/img/avatar2.jpg\", [\n            Html.div(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n                  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n                  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n                  deserunt mollit anim id est laborum.\")\n            ])\n            ])\n       ])\n\n\n\nArguments\n\n\n\nBehavior\nside::String - Side to place the timeline entries in dense and comfortable layout; For loose layout it gets overridden by timelineentry side prop. (default: \"right\") | ex. \"left\" | \"right\"\nlayout::String - Layout of the timeline. Dense keeps content and labels on one side. Comfortable keeps content on one side and labels on the opposite side. Loose puts content on both sides. (default: \"dense\") | ex. \"comfortable\" | \"loose\" | \"dense\"\nStyle\ncolor::String - Color name for component from the Quasar Color Palette. ex. \"primary\" | \"teal-10\"\ndark::Bool - Notify the component that the background is a dark color\n\n\n\n\n\n","category":"function"},{"location":"API/timelines.html#StippleUI.Timelines.timelineentry","page":"Timelines","title":"StippleUI.Timelines.timelineentry","text":"  timelineentry(args...; kwargs...)\n\n\n\nExamples\n\n\n\nView\n\njulia> timelineentry(title=\"Event Title\", subtitle=\"February 21, 1986\", icon=\"delete\",[\n            Html.div(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n                  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n                  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia\n                  deserunt mollit anim id est laborum.\")\n       ])\n\n\n\nArguments\n\n\n\nBehavior\nside::String -  Side to place the timeline entry; Works only if timeline layout is loose. (default: \"right\") | ex. \"left\" | \"right\"\nContent\ntag::String - Tag to use, if of type 'heading' only. (default: \"h3\") | ex. \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"\nheading::Bool - Defines a heading timeline item\nicon::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it). (ex. \"map\" | \"ion-add\")\navatar::String - URL to the avatar image; Icon takes precedence if used, so it replaces avatar.\ntitle::String - Title of timeline entry; Is overridden if using 'title' slot\nsubtitle::String - Subtitle of timeline entry; Is overridden if using 'subtitle' slot\nbody::String - Body content of timeline entry; Use this prop or the default slot\nStyle\ncolor::String - Color name for component from the Quasar Color Palette\n\n\n\n\n\n","category":"function"},{"location":"API/banners.html","page":"Banners","title":"Banners","text":"CurrentModule = Banners","category":"page"},{"location":"API/banners.html","page":"Banners","title":"Banners","text":"banner","category":"page"},{"location":"API/banners.html#StippleUI.Banners.banner","page":"Banners","title":"StippleUI.Banners.banner","text":"banner(content::String = \"\", args...; buttons::Vector{String} = String[], icon::Union{String,Nothing} = nothing, kwargs...)\n\nThe banner component creates a banner element to display a prominent message and related optional actions.\n\nAccording to the Material Design spec, the banner should be “displayed at the top of the screen, below a top app bar” - but of course you can put one anywhere that makes sense, even in a dialog\n\n\n\nExamples\n\n\n\nView\n\njulia> banner(\"Unfortunately, the credit card did not go through, please try again.\", class=\"bg-primary text-white\", [\n          template(\"\", \"v-slot:action\", [\n            btn(\"Dismiss\", flat=true, color=\"white\"),\n            btn(\"Update Credit Card\", flat=true, color=\"white\")\n          ])\n       ])\n       \njulia> banner(\"Could not retrieve travel data.\", rounded=true, class=\"bg-grey-3\", [\n          template(\"\", \"v-slot:avatar\", [\n            imageview(src=\"https://cdn.quasar.dev/img/mountains.jpg\", style=\"width: 100px; height:64px\")\n          ]),\n          template(\"\", \"v-slot:action\", [\n            btn(\"Retry\", flat=true, color=\"white\")\n          ])\n       ])\n\n\n\nArguments\n\n\n\nContent\ninlineactions::Bool - Display actions on same row as content\nStyle\ndense::Bool - Dense mode; occupies less space\nrounded::Bool - Applies a small standard border-radius for a squared shape of the component\ndark::Bool - Notify the component that the background is a dark color\n\n\n\n\n\n","category":"function"},{"location":"API/drawers.html","page":"Drawers","title":"Drawers","text":"CurrentModule = Drawers","category":"page"},{"location":"API/drawers.html","page":"Drawers","title":"Drawers","text":"drawer","category":"page"},{"location":"index.html#StippleUI","page":"Home","title":"StippleUI","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"StippleUI provides a collection of over 25 professional (web) UI elements, ready to implement in your Stipple app.","category":"page"},{"location":"API/lists.html","page":"Lists","title":"Lists","text":"CurrentModule = Lists","category":"page"},{"location":"API/lists.html","page":"Lists","title":"Lists","text":"list\nitem\nitem_section\nitemsection\nitem_label\nitemlabel","category":"page"},{"location":"API/lists.html#StippleUI.Lists.list","page":"Lists","title":"StippleUI.Lists.list","text":"  list(args...; kwargs...)\n\nThe list and item are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. item can also be used outside of a list too.\n\n\n\nExamples\n\n\n\nView\n\njulia>  list(bordered=true, separator=true, [\n          item(clickable=true, vripple=true, [\n            itemsection(\"Single line item\")\n          ]),\n\n          item(clickable=true, vripple=true, [\n            itemsection([\n              itemlabel(\"Item with caption\"),\n              itemlabel(\"Caption\", caption=true)\n            ])\n          ]),\n\n          item(clickable=true, vripple=true, [\n            itemsection([\n              itemlabel(\"OVERLINE\", overline=true),\n              itemlabel(\"Item with caption\")\n            ])\n          ])\n        ])\n\n\n\nArguments\n\n\n\nContent\nseparator::Bool - Applies a separator between contained items\npadding:Bool - Applies a material design-like padding on top and bottom\nStyle\nbordered::Bool - Applies a default border to the component\ndense::Bool - Dense mode; occupies less space\ndark::Bool - Notify the component that the background is a dark color\n\n\n\n\n\n","category":"function"},{"location":"API/lists.html#StippleUI.Lists.item","page":"Lists","title":"StippleUI.Lists.item","text":"  item(args...; kwargs...)\n\n\n\nArguments\n\n\n\nContent\ntag::String - HTML tag to render; Suggestion: use 'label' when encapsulating a checkbox/radio/toggle so that when user clicks/taps on the whole item it will trigger a model change for the mentioned components ex. a label div\ninsetlevel::Int - Apply an inset; Useful when avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu ex. insetlevel!=\"1\"\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value ex. 0 100\nNavigation\nhref::String - Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace' props ex. http://genieframework.com\ntarget::String - Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace' props _blank _self _parent _top\nState\ndisable::Bool - Put component in disabled mode\nactive::Bool - Put item into 'active' state\nclickable::Bool - Is item clickable? If it's the case, then it will add hover effects and emit 'click' events\nmanualfocus::Bool - Put item into a manual focus state; Enables 'focused' prop which will determine if item is focused or not, rather than relying on native hover/focus states\nfocused::Bool - Determines focus state, ONLY if 'manual-focus' is enabled / set to true\nStyle\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"API/lists.html#StippleUI.Lists.item_section","page":"Lists","title":"StippleUI.Lists.item_section","text":"  item_section(args...; kwargs...)\n\n\n\nArguments\n\n\n\navatar::Bool - Render an avatar item side (does not needs 'side' prop to be set)\nthumbnail::Bool - Render a thumbnail item side (does not needs 'side' prop to be set)\nside::Bool - Renders as a side of the item\ntop::Bool - Align content to top (useful for multi-line items)\nnowrap::Bool - Do not wrap text (useful for item's main content)\n\n\n\n\n\n","category":"function"},{"location":"API/lists.html#StippleUI.Lists.itemsection","page":"Lists","title":"StippleUI.Lists.itemsection","text":"  item_section(args...; kwargs...)\n\n\n\nArguments\n\n\n\navatar::Bool - Render an avatar item side (does not needs 'side' prop to be set)\nthumbnail::Bool - Render a thumbnail item side (does not needs 'side' prop to be set)\nside::Bool - Renders as a side of the item\ntop::Bool - Align content to top (useful for multi-line items)\nnowrap::Bool - Do not wrap text (useful for item's main content)\n\n\n\n\n\n","category":"function"},{"location":"API/lists.html#StippleUI.Lists.item_label","page":"Lists","title":"StippleUI.Lists.item_label","text":"  item_label(args...; kwargs...)\n\n\n\nArguments\n\n\n\nBehaviour\nlines::Union{Int, String} - Apply ellipsis when there's not enough space to render on the specified number of lines; ex. 1 3 lines!=\"2\"\nContent\noverline::Bool - Renders an overline label\ncaption::Bool - Renders a caption label\nheader::Bool - Renders a header label\nlines::Union{Int, String} - Apply ellipsis when there's not enough space to render on the specified number of lines; 1 3 lines!=\"2\"\n\n\n\n\n\n","category":"function"},{"location":"API/lists.html#StippleUI.Lists.itemlabel","page":"Lists","title":"StippleUI.Lists.itemlabel","text":"  item_label(args...; kwargs...)\n\n\n\nArguments\n\n\n\nBehaviour\nlines::Union{Int, String} - Apply ellipsis when there's not enough space to render on the specified number of lines; ex. 1 3 lines!=\"2\"\nContent\noverline::Bool - Renders an overline label\ncaption::Bool - Renders a caption label\nheader::Bool - Renders a header label\nlines::Union{Int, String} - Apply ellipsis when there's not enough space to render on the specified number of lines; 1 3 lines!=\"2\"\n\n\n\n\n\n","category":"function"},{"location":"API/checkboxes.html","page":"Checkboxes","title":"Checkboxes","text":"CurrentModule = Checkboxes","category":"page"},{"location":"API/checkboxes.html","page":"Checkboxes","title":"Checkboxes","text":"checkbox","category":"page"},{"location":"API/checkboxes.html#StippleUI.Checkboxes.checkbox","page":"Checkboxes","title":"StippleUI.Checkboxes.checkbox","text":"  checkbox(label::Union{String,Symbol} = \"\", fieldname::Union{Symbol,Nothing} = nothing, args...; kwargs...)\n\nThe checkbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars CheckboxModel begin\n          valone::R{Bool} = true\n       end\n\nView\n\njulia> checkbox(label = \"Apples\", fieldname = :valone, dense = true, size = \"xl\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\nindeterminatevalue::Union{String, Float64, Int, Bool} - What model value should be considered as 'indeterminate'?\ntoggleorder::String - Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ... ex. \"tf\" \"ft\"\ntoggleindeterminate::Bool - When user clicks/taps on the component, should we toggle through the indeterminate state too?\nkeepcolor::Bool - Should the color (if specified any) be kept when the component is unticked/ off?\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value\nLabel\nlabel::Union{String,Symbol} - Label to display along the component\nleftlabel::Bool - Label (if any specified) should be displayed on the left side of the component\nModel\nfieldname::Symbol - Model of the component\nval::Union{String, Float64, Int, Bool} - Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked\ntruevalue::Union{Int, Float64, String} - What model value should be considered as checked/ticked/on?\nfalsevalue::Union{Int, Float64, String} - What model value should be considered as unchecked/unticked/off?\nState\ndisable::Bool - Put component in disabled mode\nStyle\nsize::String- Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. \"16px\" \"2rem\" \"xs\" \"md\"\ncolor::String - Color name for component from the Color Palette eg. \"primary\" \"teal-10\"\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"API/trees.html","page":"Trees","title":"Trees","text":"CurrentModule = Trees","category":"page"},{"location":"API/trees.html","page":"Trees","title":"Trees","text":"tree","category":"page"},{"location":"API/separators.html","page":"Separators","title":"Separators","text":"CurrentModule = Separators","category":"page"},{"location":"API/separators.html","page":"Separators","title":"Separators","text":"separator","category":"page"},{"location":"API/separators.html#StippleUI.Separators.separator","page":"Separators","title":"StippleUI.Separators.separator","text":"  separator(args...; kwargs...)\n\nThe separator component is used to separate sections of text, other components, etc… It creates a colored line across the width of the parent. It can be horizontal or vertical.\n\n\n\n\n\n","category":"function"},{"location":"API/tables.html","page":"Tables","title":"Tables","text":"CurrentModule = Tables","category":"page"},{"location":"API/tables.html","page":"Tables","title":"Tables","text":"Column\nDataTablePagination\nDataTableOptions\nDataTable\nactive_columns\ncolumns\nrows\ndata\ntable\nStipple.render\nStipple.watch\nBase.parse","category":"page"},{"location":"API/tables.html#StippleUI.QTables.Column","page":"Tables","title":"StippleUI.QTables.Column","text":"Column(name::String, args...)\n\n\n\nExamples\n\n\n\njulia> Column(\"x2\", align = :right)\n\n\n\nArguments\n\n\n\nrequired::Bool - if we use visiblecolumns, this col will always be visible\nlabel::String - label for header\nalign::Symbol - alignment for cell\nfield::String - row Object property to determine value for this column ex. name\nsortable::Bool - tell table you want this column sortable\n\n\n\n\n\n","category":"type"},{"location":"API/tables.html#StippleUI.QTables.DataTablePagination","page":"Tables","title":"StippleUI.QTables.DataTablePagination","text":"DataTablePagination(sort_by::Symbol, descending::Bool, page::Int, row_per_page::Int)\n\n\n\nExamples\n\n\n\njulia> DataTablePagination(rows_per_page=50)\n\n\n\n\n\n","category":"type"},{"location":"API/tables.html#StippleUI.QTables.DataTableOptions","page":"Tables","title":"StippleUI.QTables.DataTableOptions","text":"DataTableOptions(addid::Bool, idcolumn::String, columns::Union{Vector{Column},Nothing}, columnspecs::Dict{Union{String, Regex}, Dict{Symbol, Any}})\n\n\n\nExamples\n\n\n\njulia> DataTableOptions(columns = [Column(\"x1\"), Column(\"x2\", align = :right)])\n\nColumnspecs\n\nUsage for formating columns\n\njulia> import Stipple.opts\njulia> df = DataFrame(a = sin.(-π:π/10:π), b = cos.(-π:π/10:π), c = string.(rand(21)))\njulia> dt = DataTable(df)\njulia> dt.opts.columnspecs[r\"^(a|b)$\"] = opts(format = jsfunction(raw\"(val, row) => `${100*val.toFixed(3)}%`\"))\njulia> model.table[] = dt\n\n\n\n\n\n","category":"type"},{"location":"API/tables.html#StippleUI.QTables.DataTable","page":"Tables","title":"StippleUI.QTables.DataTable","text":"DataTable(data::T, opts::DataTableOptions)\n\n\n\nExamples\n\n\n\njulia> df = DataFrame(a = sin.(-π:π/10:π), b = cos.(-π:π/10:π), c = string.(rand(21)))\njulia> dt = DataTable(df)\n\nor\n\njulia> using TypedTables\njulia> t = Table(a = [1, 2, 3], b = [2.0, 4.0, 6.0])\njulia> dt = DataTable(t)\n\nor\n\njulia> using Tables\njulia> Tables.table([1 2 3; 3 4 5], header = [\"a\", \"b\", \"c\"])\njulia> dt = DataTable(t1)\n\n\n\n\n\n","category":"type"},{"location":"API/toggles.html","page":"Toggles","title":"Toggles","text":"CurrentModule = Toggles","category":"page"},{"location":"API/toggles.html","page":"Toggles","title":"Toggles","text":"toggle","category":"page"},{"location":"API/toggles.html#StippleUI.Toggles.toggle","page":"Toggles","title":"StippleUI.Toggles.toggle","text":"toggle(label::Union{String,Symbol}, fieldname::Union{Symbol,Nothing}, args...; kwargs...)\n\nThe toggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars ToggleModel begin\n          value::R{Bool} = false\n          selection::R{Vector{String}} = [\"yellow\", \"red\"]\n       end\n\nView\n\njulia> toggle(\"Blue\", color=\"blue\", :selection, val=\"blue\")\njulia> toggle(\"Yellow\", color=\"yellow\", :selection, val=\"yellow\")\njulia> toggle(\"Green\", color=\"green\", :selection, val=\"green\")\njulia> toggle(\"Red\", color=\"red\", :selection, val=\"red\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL ex. \"car_id\"\nindeterminatevalue::Union{Int, Float64, String, Bool} - What model value should be considered as 'indeterminate'? default value: null ex. 0 \"not_answered\"\ntoggleorder::String - Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ... default \"tf\" ex. \"tf\" \"ft\"\ntoggleindeterminate::Bool - When user clicks/taps on the component, should we toggle through the indeterminate state too?\nkeepcolor::Bool - Should the color (if specified any) be kept when the component is unticked/ off?\nContent\nicon::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\n\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value 0 100\nIcons\ncheckedicon::String - The icon to be used when the toggle is on ex. visibility\nuncheckedicon::String - The icon to be used when the toggle is off ex. visibility-off\nindeterminateicon::String - The icon to be used when the model is indeterminate ex. help\nLabel\nlabel::Union{String,Symbol} - Label to display along the component ex. I agree to terms and conditions\nleftlabel::Bool - Label (if any specified) should be displayed on the left side of the component\nModel\nval::Union{Bool, Int, Float64, String, Vector} - Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked ex. car\ntruevalue::Union{Bool, Int, Float64, String, Vector} - What model value should be considered as checked/ticked/on? default true ex. Agreed\nfalsevalue::Union{Bool, Int, Float64, String, Vector} - What model value should be considered as unchecked/unticked/off? default false ex. Not agreed\nState\ndisabled::Bool - Put component in disabled mode\nstyle\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. 16px 1.5rem xs md\ncolor::String - Color name for component from the Color Palette ex. primary teal-10\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\niconcolor - Override default icon color (for truthy state only); Color name for component from the Color Palette ex. primary teal-10\n\n\n\n\n\n","category":"function"},{"location":"API/uploaders.html","page":"Uploaders","title":"Uploaders","text":"CurrentModule = Uploaders","category":"page"},{"location":"API/uploaders.html","page":"Uploaders","title":"Uploaders","text":"uploader","category":"page"},{"location":"API/uploaders.html#StippleUI.Uploaders.uploader","page":"Uploaders","title":"StippleUI.Uploaders.uploader","text":"  uploader(args...; kwargs...)\n\nStipple supplies a way for you to upload files through the uploader component.\n\n\n\nExamples\n\n\n\nView\n\njulia> uploader(label=\"Upload Image\", autoupload=true, multiple=true, method=\"POST\", url=\"/upload\", field__name=\"img\")\n\n\n\nArguments\n\n\n\nBehaviour\nmultiple::Bool - Allow multiple file uploads\naccept::String - Comma separated list of unique file type specifiers. Maps to 'accept' attribute of native input type=file element ex. .jpg, .pdf, image/* image/jpeg, .pdf\ncapture::String - Optionally, specify that a new file should be captured, and which device should be used to capture that new media of a type defined by the 'accept' prop. Maps to 'capture' attribute of native input type=file element ex. user environment\nmaxfilesize::Union{Int, String} - Maximum size of individual file in bytes ex. 1024 1048576\nmaxtotalsize::Union{Int, String} - Maximum size of all files combined in bytes ex. 1024 1048576\nmaxfiles::Union{Int, String} - Maximum number of files to contain ex. maxfiles!=\"5\" 10\nfilter::Function - Custom filter for added files; Only files that pass this filter will be added to the queue and uploaded; For best performance, reference it from your scope and do not define it inline ex. filter!=\"files => files.filter(file => file.size === 1024)\"\nautoupload::Bool - Upload files immediately when added\nhideuploadbtn::Bool - Don't show the upload button\nContent\nlabel::Union{String,Symbol} - Label for the uploader ex. Upload photo here\nnothumbnails::Bool - Don't display thumbnails for image files\nState\ndisable::Bool - Put component in disabled mode\nreadonly::Bool - Put component in readonly mode\nStyle\ncolor:String - Color of the component from the Color Palette eg. primary teal-10\ntextcolor::String - Overrides text color (if needed); Color name from the Color Palette eg. primary teal-10\ndark::Bool - Dark mode\nsquare::Bool - Removes border-radius so borders are squared\nflat::Bool - Applies a flat design (no default shadow)\nbordered::Bool - Applies a default border to the component\nUpload\nfactory::String - Function which should return an Object or a Promise resolving with an Object; For best performance, reference it from your scope and do not define it inline Function form. (files) => Object, Promise\nurl::String - URL or path to the server which handles the upload. Takes String or factory function, which returns String. Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline ex. \"files =>https://example.com?count={files.length}\" https://example.com/path\nmethod::String - HTTP method to use for upload; Takes String or factory function which returns a String; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline default. POST ex. POST PUT\nfieldname::String - Field name for each file upload; This goes into the following header: 'Content-Disposition: form-data; name=\"HERE\"; filename=\"somefile.png\"; If using a function then for best performance, reference it from your scope and do not define it inline default value. (file) => file.name ex. backgroundFile fieldname!=\"(file) => 'background' + file.name\"\nheaders::Union{Vector{Dict(String, String)}, String} - Array or a factory function which returns an array; Array consists of objects with header definitions; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline ex. [{name: 'Content-Type', value: 'application/json'}, {name: 'Accept', value: 'application/json'}]\nformfields::Union{Vector{Dict(String, String)}, String} - Array or a factory function which returns an array; Array consists of objects with additional fields definitions (used by Form to be uploaded); Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline ex. [{name: 'my-field', value: 'my-value'}]\nwith-credentials::Union{Bool, String} - Sets withCredentials to true on the XHR that manages the upload; Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline ex. with-credentials with!=\"files => ....\"\nsendraw::Union{Bool, String} - Send raw files without wrapping into a Form(); Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline ex. sendraw sendraw!=\"files => ....\"\nbatch::Union{Bool, String} - Upload files in batch (in one XHR request); Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline ex. \"files => files.length > 10\"\n\n\n\n\n\n","category":"function"},{"location":"API/tabs.html","page":"Tabs","title":"Tabs","text":"CurrentModule = Tabs","category":"page"},{"location":"API/tabs.html","page":"Tabs","title":"Tabs","text":"tab\ntabgroup","category":"page"},{"location":"API/tabs.html#StippleUI.Tabs.tab","page":"Tabs","title":"StippleUI.Tabs.tab","text":"  tab(args...; kwargs...)\n\ntabs are a way of displaying more information using less window real estate.\n\n\n\nExamples\n\n\n\nView\n\njulia> tab(name=\"photos\", icon=\"photos\", label=\"Photos\")\n\n\n\nArguments\n\n\n\nContent\nicon::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it). Examples. \"map\" \"ion-add\" \"img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" \"img:path/to/some_image.png\"\nlabel::Union{Int,String} - A number or string to label the tab. Example. \"Home\"\nalert::Union{Bool,String} - Adds an alert symbol to the tab, notifying the user there are some updates; If its value is not a Boolean, then you can specify a color. Example. \"alert\"\nnocaps::Bool - Turns off capitalizing all letters within the tab (which is the default)\nGeneral\nname::Union{Int,String} - Panel name. Examples. \"home\" name! =\"1\"\ntabindex::Union{Int,String} - Tabindex HTML attribute value. Examples. 0 100\nState\ndisable::Bool - Put component in disabled mode\nStyle\nripple::Union{Bool,Dict} - Configure material ripple (disable it by setting it to 'false' or supply a config object). Examples. false \"\"\"{\"early\" => true, \"center\" => true, \"color\" => \"teal\", \"keyCodes\" => []}\"\"\"\ncontentclass::String - Class definitions to be attributed to the content wrapper. \"my-special-class\"\n\n\n\n\n\n","category":"function"},{"location":"API/tabs.html#StippleUI.Tabs.tabgroup","page":"Tabs","title":"StippleUI.Tabs.tabgroup","text":"  tabgroup(fieldname::Union{Symbol,Nothing} = nothing, args...; kwargs...)\n\nThe menu component is a convenient way to show menus. Goes very well with list as dropdown content, but it's by no means limited to it.\n\nExamples\n\n\n\nModel\n\njulia> @vars TabModel begin\n          tab_m::R{String} = \"tab\"\n       end\n\nView\n\njulia> tabgroup(:tab_m, inlinelabel=true, class=\"bg-primary text-white shadow-2\", [\n          tab(name=\"photos\", icon=\"photos\", label=\"Photos\"),\n          tab(name=\"videos\", icon=\"slow_motion_video\", label=\"Videos\"),\n          tab(name=\"movies\", icon=\"movie\", label=\"Movies\")\n       ])\n\n\n\nArguments\n\n\n\nBehaviour\ntarget::Union{Bool, String} - Breakpoint (in pixels) of tabs container width at which the tabs automatically turn to a justify alignment. Default. 600 | Example. breakpoint! =\"500\"\nContent\nvertical::Bool - Use vertical design (tabs one on top of each other rather than one next to the other horizontally)\noutsidearrows::Bool - Reserve space for arrows to place them on each side of the tabs (the arrows fade when inactive)\nmobilearrows::Bool - Force display of arrows (if needed) on mobile\nalign::String - Horizontal alignment the tabs within the tabs container. Default: center | Accepted Values: left, center, right justify | Example. right\nbreakpoint::Union{Int, String} - Breakpoint (in pixels) of tabs container width at which the tabs automatically turn to a justify alignment. Default: 600 | Example. breakpoint! = \"500\"\nlefticon::String - The name of an icon to replace the default arrow used to scroll through the tabs to the left, when the tabs extend past the width of the tabs container. Example: arrow_left\nrighticon::String - The name of an icon to replace the default arrow used to scroll through the tabs to the right, when the tabs extend past the width of the tabs container. Example: arrow_right\nstretch::Bool - When used on flexbox parent, tabs will stretch to parent's height\nshrink::Bool - By default, tabs is set to grow to the available space; However, you can reverse that with this prop; Useful (and required) when placing the component in a toolbar\nswitchindicator::Bool - Switches the indicator position (on left of tab for vertical mode or above the tab for default horizontal mode)\nnarrowindicator::Bool - Allows the indicator to be the same width as the tab's content (text or icon), instead of the whole width of the tab\ninlinelabel::Bool - Allows the text to be inline with the icon, should one be used\nnocaps::Bool - Turns off capitalizing all letters within the tab (which is the default)\nStyle\nactiveclass::String - The class to be set on the active tab\nactivecolor::String - The color to be attributed to the text of the active tab. Examples. teal-10 primary\nactivecolorbg::String - The color to be attributed to the background of the active tab. Examples. teal-10 primary\nindicatorcolor::String - The color to be attributed to the indicator (the underline) of the active tab. Examples. teal-10 primary\ncontentclass::String - Class definitions to be attributed to the content wrapper\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"API/headings.html","page":"Headings","title":"Headings","text":"CurrentModule = Headings","category":"page"},{"location":"API/headings.html","page":"Headings","title":"Headings","text":"heading","category":"page"},{"location":"API/imageviews.html","page":"-","title":"-","text":"CurrentModule = ImageViews","category":"page"},{"location":"API/imageviews.html","page":"-","title":"-","text":"imageview","category":"page"},{"location":"API/imageviews.html#StippleUI.ImageViews.imageview","page":"-","title":"StippleUI.ImageViews.imageview","text":"  imageview(args...; kwargs...)\n\nThe imageview component makes working with images (any picture format) easy and also adds a nice loading effect to it along with many other features (example: the ability to set an aspect ratio).\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars Model begin\n          url::R{String} = \"https://placeimg.com/500/300/nature\"\n       end\n\nView\n\njulia> imageview(src = :url, spinnercolor = \"white\", style = \"height: 140px; max-width: 150px\" )\njulia> imageview(src = :url, style = \"height: 140px; max-width: 150px\", [\n          template(\"\", \"v-slot:loading\", [spinner(:gears, color = \"white\", wrap = StippleUI.NO_WRAPPER)]),\n       ])\n\n\n\nArguments\n\n\n\nBehaviour     * transition::String - One of embedded transitions ex. fade slide-down     * nativecontextmenu::Bool - Enable the native context menu of the image\nContent     * ratio::Union{String, Int} - Force the component to maintain an aspect ratio ex. ratio!=\"4/3\" (Number format) ratio!=\"16/9\" (String format) ratio=\"1\"     * alt::String - Specifies an alternate text for the image, if the image cannot be displayed ex. Two cats     * basic::Bool - Do not use transitions; faster render     * contain::Bool - Make sure that the image getting displayed is fully contained, regardless if additional blank space besides the image is needed on horizontal or vertical\nModel     * src::String - Path to image ex. (public folder) src=\"img/something.png\" (assets folder) src=\"~assets/my-img.gif\" (URL) src=\"https://placeimg.com/500/300/nature\"     * srcset::String - Same syntax as <img> srcset attribute. ex. elva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w     * sizes::String - Same syntax as <img> sizes attribute. ex. (max-width: 320px) 280px, (max-width: 480px) 440px, 800px     * width::String - Forces image width; Must also include the unit (px or %) ex. 280px 70%     * height::String - Forces image height; Must also include the unit (px or %) ex. 280px 70%     * placeholdersrc::String - While waiting for your image to load, you can use a placeholder image ex. (public folder) src=\"img/something.png\" (assets folder) src=\"~assets/my-img.gif\" (URL) src=\"https://placeimg.com/500/300/nature\"  \nStyle\ncolor::String - Color name for component from the Color Palette eg. primary teal-10\nimgclass::Union{Vector, String, Dict} - Class definitions to be attributed to the container of image; Does not apply to the caption ex. my-special-class imgclass!=\"{ 'my-special-class': <condition> }\"\nimgstyle::Dict - Apply CSS to the container of the image; Does not apply to the caption ex. imgstyle!=\"{ transform: 'rotate(45deg)' }\"\nspinnercolor::String - Color name for default Spinner (unless using a 'loading' slot) primary teal-10\nspinnersize::String - Size in CSS units, including unit name, for default Spinner (unless using a 'loading' slot) ex. 16px 2rem\n\n\n\n\n\n","category":"function"},{"location":"API/spaces.html","page":"Spaces","title":"Spaces","text":"CurrentModule = Spaces","category":"page"},{"location":"API/spaces.html","page":"Spaces","title":"Spaces","text":"space","category":"page"},{"location":"API/stippleui.html","page":"StippleUI","title":"StippleUI","text":"CurrentModule = StippleUI","category":"page"},{"location":"API/stippleui.html","page":"StippleUI","title":"StippleUI","text":"theme\ndeps\n@click","category":"page"},{"location":"API/spinners.html","page":"Spinners","title":"Spinners","text":"CurrentModule = Spinners","category":"page"},{"location":"API/spinners.html","page":"Spinners","title":"Spinners","text":"spinner","category":"page"},{"location":"API/spinners.html#StippleUI.Spinners.spinner","page":"Spinners","title":"StippleUI.Spinners.spinner","text":"spinner(spinner_type::Union{String,Symbol} = \"\", args...; kwargs...)\n\nA spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars SpinnerModel begin\n          box::R{String} = \"box\"\n          comment::R{String} = \"comment\"\n          hourglass::R{String} = \"hourglass\"\n       end\n\nView\n\njulia> spinner(color=\"primary\", size=\"3em\")\njulia> spinner(:box, color=\"orange\",size=\"5.5em\")\njulia> spinner(:comment, color=\"green\",size=\"3em\")\njulia> spinner(:hourglass, color=\"purple\", size=\"4em\")\n\n\n\nArguments\n\n\n\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)  ex. 16px  2rem  xs md\ncolor::String - Color name for component from the Color Palette ex. primary teal\nthickness::Int - Override value to use for stroke-width ex. 5\n\n\n\n\n\n","category":"function"},{"location":"API/videos.html","page":"Videos","title":"Videos","text":"CurrentModule = Videos","category":"page"},{"location":"API/videos.html","page":"Videos","title":"Videos","text":"video","category":"page"},{"location":"API/videos.html#StippleUI.Videos.video","page":"Videos","title":"StippleUI.Videos.video","text":"video(args...; kwargs...)\n\nUsing the video component makes embedding a video like Youtube easy. It also resizes to fit the container by default.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars RadioModel begin\n         v_ratio::R{String} = \"16/9\"\n       end\n\nView\n\njulia> video(src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\") \njulia> video(ratio=:v_ratio, src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\")\n\n\n\nArguments\n\n\n\nAccessibility\ntitle::String - (Accessibility) Set the native 'title' attribute value of the inner iframe being used\nBehaviour\nfetchpriority::String - Provides a hint of the relative priority to use when fetching the iframe document. Default: \"auto\" | Accepted values: \"auto\", \"high\", \"low\"\nloading::String - Indicates how the browser should load the iframe. Default: \"eager\" | Accepted Values: \"eager\", \"lazy\"\nreferrerpolicy::String - Indicates which referrer to send when fetching the frame's resource. Default: \"strict-origin-when-cross-origin\" | Accepted Values: \"no-referrer\", \"no-referrer-when-downgrade\", \"origin\", \"origin-when-cross-origin\", \"origin-when-cross-origin\", \"strict-origin\", \"strict-origin-when-cross-origin\", \"unsafe-url\"\nModel\nsrc::String - The source url to display in an iframe.\nStyle\nratio::Union{String,Int,Float64} - Aspect ratio for the content; If value is a String, then avoid using a computational statement (like '16/9') and instead specify the String value of the result directly (eg. '1.7777')\n\n\n\n\n\n","category":"function"},{"location":"API/popupproxies.html","page":"PopupProxies","title":"PopupProxies","text":"CurrentModule = PopupProxies","category":"page"},{"location":"API/popupproxies.html","page":"PopupProxies","title":"PopupProxies","text":"popup_proxy\nPopupProxy\nBase.string","category":"page"},{"location":"API/popupproxies.html#StippleUI.PopupProxies.popup_proxy","page":"PopupProxies","title":"StippleUI.PopupProxies.popup_proxy","text":"  popup_proxy(fieldname::Union{Symbol,Nothing} = nothing, args...; content::Union{String,Vector,Function} = \"\", kwargs...)\n\npopupproxy should be used when you need either a menu (on bigger screens) or a dialog (on smaller screens) to be displayed. It acts as a proxy which picks either of the two components to use. popupproxy also handles context-menus.\n\n\n\nExamples\n\n\n\nView\n\njulia> btn(\"Handles click\", push=true, color=\"primary\", [\n          popupproxy([\n            banner(\"You have lost connection to the internet. This app is offline.\", [\n              template(\"\", \"v-slot:avatar\", [\n                icon(\"signal_wifi_off\", color=\"Primary\")\n              ])\n            ])\n          ])\n       ])\n\n\n\nArguments\n\n\n\nBehaviour\ntarget::Union{Bool, String} - Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) or a DOM element it attaches the events to the specified DOM element (if it exists) ex. true ex. target!=false target!=\".my-parent\"\nnoparentevent::Bool - Skips attaching events to the target DOM element (that trigger the element to get shown)\ncontextmenu::Bool - Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)\nbreakpoint::Union{Int, String} - Breakpoint (in pixels) of window width/height (whichever is smaller) from where a Menu will get to be used instead of a Dialog ex. 992 breakpoint!=\"1234\"\n\n\n\n\n\n","category":"function"},{"location":"API/popupproxies.html#Base.string","page":"PopupProxies","title":"Base.string","text":"string(n::Integer; base::Integer = 10, pad::Integer = 1)\n\nConvert an integer n to a string in the given base, optionally specifying a number of digits to pad to.\n\nSee also digits, bitstring, count_zeros.\n\nExamples\n\njulia> string(5, base = 13, pad = 4)\n\"0005\"\n\njulia> string(-13, base = 5, pad = 4)\n\"-0023\"\n\n\n\n\n\nstring(xs...)\n\nCreate a string from any values using the print function.\n\nstring should usually not be defined directly. Instead, define a method print(io::IO, x::MyType). If string(x) for a certain type needs to be highly efficient, then it may make sense to add a method to string and define print(io::IO, x::MyType) = print(io, string(x)) to ensure the functions are consistent.\n\nSee also: String, repr, sprint, show.\n\nExamples\n\njulia> string(\"a\", 1, true)\n\"a1true\"\n\n\n\n\n\n","category":"function"},{"location":"API/tabpanels.html","page":"TabPanels","title":"TabPanels","text":"CurrentModule = TabPanels","category":"page"},{"location":"API/tabpanels.html","page":"TabPanels","title":"TabPanels","text":"tabpanel\ntabpanelgroup","category":"page"},{"location":"API/tabpanels.html#StippleUI.TabPanels.tabpanel","page":"TabPanels","title":"StippleUI.TabPanels.tabpanel","text":"tabpanel(args...; kwargs...)\n\nTab panels are a way of displaying more information using less window real estate.\n\n\n\nExamples\n\n\n\nModel\n\njulia> \n\nView\n\njulia> \n\n\n\nArguments\n\n\n\nGeneral\nname::Union{Any} - Panel name\nState\ndisable::Bool - Put component in disabled mode\nStyle\ndark::Bool - Notify the component that the background is a dark color\n\n\n\n\n\n","category":"function"},{"location":"API/tabpanels.html#StippleUI.TabPanels.tabpanelgroup","page":"TabPanels","title":"StippleUI.TabPanels.tabpanelgroup","text":"tabpanelgroup(args...; kwargs...)\n\ntabpanelgroup are a way of displaying more information using less window real estate.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars TabPanelModel begin\n            gpanel::R{String} = \"panel\"\n       end\n\nView\n\njulia> Html.div(class=\"q-pa-md\", [\n          Html.div(class=\"q-gutter-y-md\", style=\"max-width: 350px\", [\n             tabpanelgroup(:gpanel, animated=true, swipeable=true, infinite=true,\n                   class=\"bg-purple text-white shadow-2 rounded-borders\", [\n                   tabpanel(\"Lorem ipsum dolor sit amet consectetur\n                    adipisicing elit.\", name=\"mails\", [\n                   Html.div(\"Mails\", class=\"text-h6\")\n             ]),\n            \n             tabpanel(\"Lorem ipsum dolor sit amet consectetur\n                  adipisicing elit.\", name=\"alarms\", [\n                        Html.div(\"Alarms\", class=\"text-h6\")\n             ]),\n\n             tabpanel(\"Lorem ipsum dolor sit amet consectetur\n                  adipisicing elit.\", name=\"movies\", [\n                        Html.div(\"Movies\", class=\"text-h6\")\n                  ]),\n             ])\n          ])\n       ])\n\n\n\nArguments\n\n\n\nBehaviour\nkeepalive::Bool - Equivalent to using Vue's native <keep-alive> component on the content\nkeepaliveinclude::Union{String,Vector} - Equivalent to using Vue's native include prop for <keep-alive>; Values must be valid Vue component names (e.g. \"a,b\" \"/a|b/\" ['a', 'b'])\nkeepaliveexclude::Union{String,Vector} - Equivalent to using Vue's native exclude prop for <keep-alive>; Values must be valid Vue component names (e.g. \"a,b\" \"/a|b/\" ['a', 'b'])\nkeepalivemax::Int - Equivalent to using Vue's native max prop for <keep-alive> (e.g. 2)\nanimated::Bool - Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)\ninfinite::Bool - Makes component appear as infinite (when reaching last panel, next one will become the first one)\nswipeable::Bool - Enable swipe events (may interfere with content's touch/mouse events)\nvertical::Bool - Default transitions and swipe actions will be on the vertical axis\ntransitionprev::String - One of Quasar's embedded transitions (has effect only if 'animated' prop is set) (e.g. \"fade\" \"slide-down\")\ntransitionnext::String - One of Quasar's embedded transitions (has effect only if 'animated' prop is set) (e.g. \"fade\" \"slide-down\")\n\n\n\n\n\n","category":"function"},{"location":"API/skeletons.html","page":"Skeletons","title":"Skeletons","text":"CurrentModule = Skeletons","category":"page"},{"location":"API/skeletons.html","page":"Skeletons","title":"Skeletons","text":"skeleton","category":"page"},{"location":"API/skeletons.html#StippleUI.Skeletons.skeleton","page":"Skeletons","title":"StippleUI.Skeletons.skeleton","text":"skeleton(args...; kwargs...)\n\nThe skeleton is a component for displaying a placeholder preview of your content before you load the actual page data. It’s a nice way of informing the user of what to expect from the page before it is fully loaded and increases the perceived performance. It can be used to incrementally display information on screen as data is being fetched.\n\n\n\nExamples\n\n\n\nView\n\njulia> skeleton(type=\"QAvatar\")\n])\n\n\n\nArguments\n\n\n\nContent\ntag::String - HTML tag to render. Defaults to \"div\". Examples \"div\" \"span\"\ntype::String - Type of skeleton placeholder. Defaults to \"rect\". Accepted values are \"rect\" \"circle\" \"QBadge\" \"QChip\" \"QRadio\" etc\nStyle\ndark::Bool - Whether to use a dark skeleton.\nanimation::String - The animation effect of the skeleton placeholder. Defaults: \"wave\" | Examples. \"pulse\" \"fade\" \"blink\" \"none\" \"pulse-x\"\nsquare::Bool - Removes border-radius so borders are squared\nbordered::Bool - Applies a default border to the component\nsize::String - Size in CSS units, including unit name; Overrides 'height' and 'width' props and applies the value to both height and width\nwidth::String - Width in CSS units, including unit name; Apply custom width; Use this prop or through CSS; Overridden by 'size' prop if used\nheight::String - Height in CSS units, including unit name; Apply custom height; Use this prop or through CSS; Overridden by 'size' prop if used. Examples \"16px\" \"2em\"\n\n\n\n\n\n","category":"function"},{"location":"API/forminputs.html","page":"FormInputs","title":"FormInputs","text":"CurrentModule = FormInputs","category":"page"},{"location":"API/forminputs.html","page":"FormInputs","title":"FormInputs","text":"textfield\nnumberfield\ntextarea\nfilefield","category":"page"},{"location":"API/forminputs.html#StippleUI.FormInputs.textfield","page":"FormInputs","title":"StippleUI.FormInputs.textfield","text":"textfield(fieldname, args...; kwargs...)\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars TextField begin\n          name::R{String} = \"\"\n       end\n\nView\n\njulia> textfield(\"What's your name *\", :name, name = \"name\", @iif(:warin), :filled, hint = \"Name and surname\", \"lazy-rules\",\n          rules = \"[val => val && val.length > 0 || 'Please type something']\"\n       )\n\n\n\nArguments\n\n\n\nGeneral     * type::String - Must be one of the following: text (default), textarea, email, tel, number, password and url. This is important as it determines the keyboard type popping up on mobile devices.\nBehaviour     * name::String - Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists ex. car_id     * mask::String - Custom mask or one of the predefined mask names ex. date datetime time fulltime phone card     * fillmask::Union{Bool, String} - Fills string with specified characters (or underscore if value is not string) to fill mask's length ex. true 0 _     * reversefillmask::Bool - Fills string from the right side of the mask     * unmaskedvalue::Bool - Model will be unmasked (won't contain tokens/separation characters)     * error::Bool - Does field have validation errors?     * rules::Vector - Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules ex. rules!=\"[ 'fulltime' ]\" rules!=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"     * reactiverules::Bool - By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it     * lazyrules::Union{Bool, String} - If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper form submits itself true false ondemand     * loading::Bool - Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.     * clearable::Bool - Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null     * autofocus::Bool - Focus field on initial component render     * for::String - Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well ex. myFieldsId\nContent     * errormessage::String - Validation error message (gets displayed only if 'error' is set to 'true') ex. Username must have at least 5 characters     * noerroricon::Bool - Hide error icon when there is an error     * label::Union{String,Symbol} - A text label that will “float” up above the input field, once the field gets focus ex. Username     * stacklabel::Bool - Label will be always shown above the field regardless of field content (if any)     * hint::String - Helper (hint) text which gets placed below your wrapped form component ex. Fill in between 3 and 12 characters     * hidehint::Bool - Hide the helper (hint) text when field doesn't have focus     * prefix::String - Prefix ex. $     * suffix::String - Suffix ex. @gmail.com     * loading::Bool - Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.     * clearable::Bool - Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null     * clearicon::String - Custom icon to use for clearable icon; If not specified, then it uses the default icon     * labelslot::Bool - Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set     * bottomslots::Bool - Enables bottom slots ('error', 'hint', 'counter')     * counter::Bool - Show an automatic counter on bottom right     * shadowtext::String - Text to be displayed as shadow at the end of the text in the control; Does NOT applies to type=file     * autogrow::Bool - Make field autogrow along with its content (uses a textarea)\nState     * disable::Bool - Put component in disabled mode     * readonly::Bool - Put component in readonly mode\nStyle     * labelcolor::String - Color name for the label from the Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused ex. primary teal     * color::String - Color name for component from the Color Palette     * bgcolor::String - Color from Color Palette     * dark::Bool - Notify the component that the background is a dark color     * filled::Bool - Use 'filled' design for the field     * outline::Bool - Use 'outlined' design for the field     * borderless::Bool - Use 'borderless' design for the field     * standout::Union{Bool, String} - Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones) ex. standout standout=\"bg-primary text-white\"     * hidebottomspace::Bool - Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content     * rounded::Bool - Applies a small standard border-radius for a squared shape of the component     * square::Bool - Remove border-radius so borders are squared; Overrides 'rounded' prop     * dense::Bool - Dense mode; occupies less space     * itemaligned::Union{Vector, String, Dict} - Match inner content alignment to that of item     * inputclass::Union{Vector, String, Dict} - Class definitions to be attributed to the underlying input tag ex. my-special-class inputclass!=\"{ 'my-special-class': <condition> }\"     * inputstyle::Union{Vector, String, Dict} - Style definitions to be attributed to the underlying input tag ex. background-color: #ff0000 inputstyle!=\"{ backgroundColor: #ff0000 }\"\nModel     * debounce::Union{String, Int} - Debounce amount (in milliseconds) when updating model ex. 0 500     * maxlength::Union{String, Int} - Specify a max length of model ex. 12\n\n\n\n\n\n","category":"function"},{"location":"API/forminputs.html#StippleUI.FormInputs.numberfield","page":"FormInputs","title":"StippleUI.FormInputs.numberfield","text":"numberfield( label::Union{String, Symbol} = \"\", fieldname::Union{Symbol,Nothing} = nothing, args...; content::Union{String,Vector,Function} = \"\", kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"API/forminputs.html#StippleUI.FormInputs.textarea","page":"FormInputs","title":"StippleUI.FormInputs.textarea","text":"textarea(label::Union{String,Symbol} = \"\", fieldname::Union{Symbol,Nothing} = nothing, args...; content::Union{String,Vector,Function} = \"\", kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"API/forminputs.html#StippleUI.FormInputs.filefield","page":"FormInputs","title":"StippleUI.FormInputs.filefield","text":"filefield( label::Union{String, Symbol} = \"\", fieldname::Union{Symbol,Nothing} = nothing, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"API/knobs.html","page":"Knobs","title":"Knobs","text":"CurrentModule = Knobs","category":"page"},{"location":"API/knobs.html","page":"Knobs","title":"Knobs","text":"knob","category":"page"},{"location":"API/knobs.html#StippleUI.Knobs.knob","page":"Knobs","title":"StippleUI.Knobs.knob","text":"  knob(range::AbstractRange{T} where T <: Real, fieldname::Union{Symbol,Nothing} = nothing, args...; kwargs...)\n\nRenders a knob input element.\n\n\n\n\n\n","category":"function"},{"location":"API/datepickers.html","page":"DatePickers","title":"DatePickers","text":"CurrentModule = DatePickers","category":"page"},{"location":"API/datepickers.html","page":"DatePickers","title":"DatePickers","text":"DateRange\ndatepicker\nDatePicker\nDates.parse\nStipple.render\nBase.convert","category":"page"},{"location":"API/datepickers.html#StippleUI.DatePickers.DateRange","page":"DatePickers","title":"StippleUI.DatePickers.DateRange","text":"DateRange\n\nRepresents a date interval, between start and stop, with a 1 day step.\n\n\n\n\n\n","category":"type"},{"location":"API/datepickers.html#StippleUI.DatePickers.datepicker","page":"DatePickers","title":"StippleUI.DatePickers.datepicker","text":"datepicker()\n\nRenders a date picker (calendar) input element. If the fieldname references a Vector{Date}, the multiple keyword parameter must be passed as true. If the fieldname references a DateRange, the range keyword parameter must be passed as true. If the fieldname references a Vector{DateRange}, both the multiple and the range keyword parameters must be passed as true.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @vars DatePickers begin\n        date::R{Date} = today() + Day(30)\n        dates::R{Vector{Date}} = Date[today()+Day(10), today()+Day(20), today()+Day(30)]\n        daterange::R{DateRange} = DateRange(today(), (today() + Day(3)))\n        dateranges::R{Vector{DateRange}} = [\n          DateRange(today(), (today() + Day(3))),\n          DateRange(today() + Day(7), (today() + Day(10))),\n          DateRange(today() + Day(14), (today() + Day(17))),\n        ]\n        proxydate::R{Date} = today()\n        inputdate::R{Date} = today()\n      end\n\nView\n\njulia> datepicker(:date)\njulia> datepicker(:dates, multiple = true)\njulia> datepicker(:daterange, range = true)\njulia> datepicker(:dateranges, range = true, multiple = true)\n\n\n\nArguments\n\n\n\nBehavior\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL ex. \"car_id\"\nlandscape::Bool - Display the component in landscape mode\nyearsinmonthview::Bool - Show the years selector in months view\nContent\ntitle::String - When specified, it overrides the default header title; Makes sense when not in 'minimal' mode ex. \"Birthday\"\nsubtitle::String  - When specified, it overrides the default header subtitle; Makes sense when not in 'minimal' mode ex. \"John Doe\"\ntodaybtn::Bool - Display a button that selects the current day\nminimal::Bool - Don't display the header\nSelection\nnavminyearmonth::String - Lock user from navigating below a specific year+month (in YYYY/MM format); This prop is not used to correct the model; You might want to also use 'default-year-month' prop ex. \"2020/07\"\nnavmaxyearmonth::String - Lock user from navigating above a specific year+month (in YYYY/MM format); This prop is not used to correct the model; You might want to also use 'default-year-month' prop ex. \"2020/10\"\nnounset::Bool - Remove ability to unselect a date; It does not apply to selecting a range over already selected dates\nmultiple::Bool - Allow multiple selection; Model must be Array\nrange::Bool - Allow range selection; Partial compatibility with 'options' prop: selected ranges might also include 'unselectable' days\nState\nreadonly::Bool - Put component in readonly mode\ndisable::Bool - Put component in disabled mode\nStyle\ncolor::String - Color name for component from the Quasar Color Palette ex. \"primary\" \"teal-10\"\ntextcolor::String - Overrides text color (if needed); Color name from the Quasar Color Palette ex. \"primary\" \"teal-10\"\ndark::Bool - Notify the component that the background is a dark color\nsquare::Bool - Removes border-radius so borders are squared\nflat::Bool - Applies a 'flat' design (no default shadow)\nbordered::Bool - Applies a default border to the component\neventcolor::String - Color name (from the Quasar Color Palette); If using a function, it receives the date as a String and must return a String (color for the received date); If using a function then for best performance, reference it from your scope and do not define it inline ex. \"teal-10\" eventcolor!=\"(date) => date[9] % 2 === 0 ? 'teal' : 'orange'\"\n\n\n\n\n\n","category":"function"},{"location":"API/datepickers.html#Base.parse","page":"DatePickers","title":"Base.parse","text":"parse(type, str; base)\n\nParse a string as a number. For Integer types, a base can be specified (the default is 10). For floating-point types, the string is parsed as a decimal floating-point number.  Complex types are parsed from decimal strings of the form \"R±Iim\" as a Complex(R,I) of the requested type; \"i\" or \"j\" can also be used instead of \"im\", and \"R\" or \"Iim\" are also permitted. If the string does not contain a valid number, an error is raised.\n\ncompat: Julia 1.1\nparse(Bool, str) requires at least Julia 1.1.\n\nExamples\n\njulia> parse(Int, \"1234\")\n1234\n\njulia> parse(Int, \"1234\", base = 5)\n194\n\njulia> parse(Int, \"afc\", base = 16)\n2812\n\njulia> parse(Float64, \"1.2e-3\")\n0.0012\n\njulia> parse(Complex{Float64}, \"3.2e-1 + 4.5im\")\n0.32 + 4.5im\n\n\n\n\n\nparse(::Type{Platform}, triplet::AbstractString)\n\nParses a string platform triplet back into a Platform object.\n\n\n\n\n\nparse(Request, str)\nparse(Response, str)\n\nParse a string into a Request or Response object.\n\n\n\n\n\nparse(Colorant, desc)\n\nParse a color description.\n\nThis parses a subset of HTML/CSS color specifications. In particular, everything is supported but: currentColor.\n\nIt does support named colors (though it uses X11 named colors, which are slightly different than W3C named colors in some cases), rgb(), hsl(), #RGB, and #RRGGBB syntax.\n\nArguments\n\nColorant: literal Colorant\ndesc: color name or description\n\nA literal Colorant will parse according to the desc string (usually returning an RGB); any more specific choice will return a color of the specified type.\n\nReturns\n\nan RGB{N0f8} color, or\nan HSL color if hsl(h, s, l) was used\nan RGBA color if rgba(r, g, b, a) was used\nan HSLA color if hsla(h, s, l, a) was used\nan ARGB{N0f8} color if 0xAARRGGBB/0xARGB was used\na specific Colorant type as specified in the first argument\n\nnote: Note for X11 named colors\nThe X11 color names with spaces (e.g. \"sea green\") are not recommended because they are not allowed in the SVG/CSS.\n\nnote: Note for hex notations\nYou can parse not only the CSS-style hex notations #RRGGBB/#RGB, but also 0xRRGGBB/0xRGB.You can also parse the 8-digit or 4-digit hex notation into an RGB color with alpha. However, the result depends on the prefix (i.e. # or 0x).julia> parse(Colorant, \"#FF8800AA\") # transparent orange\nRGBA{N0f8}(1.0,0.533,0.0,0.667)\n\njulia> parse(Colorant, \"0xFF8800AA\") # opaque purple\nARGB{N0f8}(0.533,0.0,0.667,1.0)\n\n\n\n\n\n","category":"function"},{"location":"API/datepickers.html#Stipple.render","page":"DatePickers","title":"Stipple.render","text":"function render\n\nAbstract function. Needs to be specialized by plugins. It is automatically invoked by Stipple to serialize a Julia data type (corresponding to the fields in the ReactiveModel instance) to JavaScript/JSON. In general the specialized methods should return a Julia Dict which are automatically JSON encoded by Stipple. If custom JSON serialization is required for certain types in the resulting Dict, specialize JSON.lower for that specific type.\n\nExample\n\nfunction Stipple.render(ps::PlotSeries, fieldname::Union{Symbol,Nothing} = nothing)\n  Dict(:name => ps.name, ps.plotdata.key => ps.plotdata.data)\nend\n\nSpecialized JSON rendering for Undefined\n\nJSON.lower(x::Undefined) = \"__undefined__\"\n\n\n\n\n\n","category":"function"},{"location":"API/datepickers.html#Base.convert","page":"DatePickers","title":"Base.convert","text":"convert(T, x)\n\nConvert x to a value of type T.\n\nIf T is an Integer type, an InexactError will be raised if x is not representable by T, for example if x is not integer-valued, or is outside the range supported by T.\n\nExamples\n\njulia> convert(Int, 3.0)\n3\n\njulia> convert(Int, 3.5)\nERROR: InexactError: Int64(3.5)\nStacktrace:\n[...]\n\nIf T is a AbstractFloat or Rational type, then it will return the closest value to x representable by T.\n\njulia> x = 1/3\n0.3333333333333333\n\njulia> convert(Float32, x)\n0.33333334f0\n\njulia> convert(Rational{Int32}, x)\n1//3\n\njulia> convert(Rational{Int64}, x)\n6004799503160661//18014398509481984\n\nIf T is a collection type and x a collection, the result of convert(T, x) may alias all or part of x.\n\njulia> x = Int[1, 2, 3];\n\njulia> y = convert(Vector{Int}, x);\n\njulia> y === x\ntrue\n\nSee also: round, trunc, oftype, reinterpret.\n\n\n\n\n\n","category":"function"},{"location":"API/ranges.html","page":"Ranges","title":"Ranges","text":"CurrentModule = Ranges","category":"page"},{"location":"API/ranges.html","page":"Ranges","title":"Ranges","text":"RangeData\nBase.range\nslider\nStipple.render\nBase.parse","category":"page"},{"location":"API/ranges.html#Base.range","page":"Ranges","title":"Base.range","text":"range(start, stop, length)\nrange(start, stop; length, step)\nrange(start; length, stop, step)\nrange(;start, length, stop, step)\n\nConstruct a specialized array with evenly spaced elements and optimized storage (an AbstractRange) from the arguments. Mathematically a range is uniquely determined by any three of start, step, stop and length. Valid invocations of range are:\n\nCall range with any three of start, step, stop, length.\nCall range with two of start, stop, length. In this case step will be assumed\n\nto be one. If both arguments are Integers, a UnitRange will be returned.\n\nExamples\n\njulia> range(1, length=100)\n1:100\n\njulia> range(1, stop=100)\n1:100\n\njulia> range(1, step=5, length=100)\n1:5:496\n\njulia> range(1, step=5, stop=100)\n1:5:96\n\njulia> range(1, 10, length=101)\n1.0:0.09:10.0\n\njulia> range(1, 100, step=5)\n1:5:96\n\njulia> range(stop=10, length=5)\n6:10\n\njulia> range(stop=10, step=1, length=5)\n6:1:10\n\njulia> range(start=1, step=1, stop=10)\n1:1:10\n\nIf length is not specified and stop - start is not an integer multiple of step, a range that ends before stop will be produced.\n\njulia> range(1, 3.5, step=2)\n1.0:2.0:3.0\n\nSpecial care is taken to ensure intermediate values are computed rationally. To avoid this induced overhead, see the LinRange constructor.\n\ncompat: Julia 1.1\nstop as a positional argument requires at least Julia 1.1.\n\ncompat: Julia 1.7\nThe versions without keyword arguments and start as a keyword argument require at least Julia 1.7.\n\n\n\n\n\n","category":"function"},{"location":"API/ranges.html#StippleUI.Ranges.slider","page":"Ranges","title":"StippleUI.Ranges.slider","text":"slider(range::AbstractRange{<:Union{Symbol, String, Real}}, fieldname::Union{Symbol,Nothing} = nothing, args...; lazy = false, kwargs...)\n\nThe slider is a great way for the user to specify a number value between a minimum and maximum value, with optional steps between valid values. The slider also has a focus indicator (highlighted slider button), which allows for keyboard adjustments of the slider.\n\nExamples\n\n\n\nView\n\njulia> slider(1:5:100)\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL ex. car_id\nsnap::Bool - Snap on valid values, rather than sliding freely; Suggestion: use with 'step' property\nreverse::Bool - Work in reverse (changes direction)\nvertical::Bool - Display in vertical direction\nlabelalways::Bool - Always display the label\nContent\nlabel::Bool - Popup a label when user clicks/taps on the slider thumb and moves it\nmarkers::Union{Bool, Int} - Display markers on the track, one for each possible value for the model or using a custom step (when specifying a Number) ex. markers markers=\"5\"\ndragrange::Bool - User can drag range instead of just the two thumbs\ndragonlyrange::Bool - User can drag only the range instead and NOT the two thumbs\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value ex. 0 100\nLabels\nlabelcolorleft::String - Color name for left label background from the Color Palette ex. primary teal-10\nlabeltextcolorleft::String - Color name for left label text from the Color Palette ex. primary teal-10\nlabelcolorright::String - Color name for right label background from the Color Palette ex. primary teal-10\nlabeltextcolorright::String - Color name for right label text from the Color Palette ex. primary teal-10\nlabelvalueleft::Union{String, Int} - Override default label for min value ex. labelvalueleft=\"model.min + 'px'\"\nlabelvalueright::Union{String, Int} - Override default label for max value ex. labelvalueright=\"model.max + 'px'\"\nModel\nrange::AbstractRange{T} - The range of values to select from min:step:max, symbols or strings can be used to reference model fields, e.g. range(\"min\":2:\"max\", :myvalue)\nlazy::Bool - If true, update the value of the model field only upon release of the slider\nState\ndisable::Bool - Put component in disabled mode\nreadonly::Bool - Put component in readonly mode\nStyle\ncolor::String - Color name for component from the Color Palette ex. primary teal-10\nlabelcolor::String - Color name for component from the Color Palette ex. primary teal-10\nthumbpath::String - Set custom thumb svg path ex. M5 5 h10 v10 h-10 v-10\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"API/API.html","page":"API","title":"API","text":"CurrentModule = API","category":"page"},{"location":"API/API.html","page":"API","title":"API","text":"ATTRIBUTES_MAPPINGS\nattributes\nq__elem\nxelem\nquasar\nvue\nxelem_pure\nquasar_pure\nvue_pure\ncsscolors","category":"page"},{"location":"API/API.html#StippleUI.API.csscolors","page":"API","title":"StippleUI.API.csscolors","text":"`csscolors(name, color)`\n`csscolors(names, colors)`\n`csscolors(prefix, colors)`\n\nConstruct a css string that defines colors to be used for styling quasar elements; either as a value for the keyword argument color or as a classname with the resective prefix text- or bg-. (cf. quasar docs)\n\nUsage\n\ncss = style(csscolors(:stipple, [RGB(0.2, 0.4, 0.8), \"#123456\", RGBA(0.1, 0.2, 0.3, 0.5)]))\n\nui(model) = css * page(model, class=\"container, text-stipple-1\", [   btn(\"Hit me\", @click(:pressed), color=\"stipple-3\") ])\n\n\n\n\n\n","category":"function"},{"location":"API/bignumbers.html","page":"BigNumbers","title":"BigNumbers","text":"CurrentModule = BigNumbers","category":"page"},{"location":"API/bignumbers.html","page":"BigNumbers","title":"BigNumbers","text":"bignumber","category":"page"},{"location":"API/bignumbers.html#StippleUI.BigNumbers.bignumber","page":"BigNumbers","title":"StippleUI.BigNumbers.bignumber","text":"  bignumber(label::Union{String,Symbol} = \"\", number::Union{Symbol,Number,Nothing} = nothing, args...; kwargs...)\n\nRenders a Big Number UI element.\n\nArguments\n\nlabel::Union{String,Symbol}\nnumber::Union{String,Symbol,Nothing,String}\nicon::Union{String,Symbol}\ncolor::Union{String,Symbol} = \"positive\"|\"negative\"\narrow::Union{String,Symbol} = \"up\"|\"down\"\n\n\n\n\n\n","category":"function"},{"location":"API/menus.html","page":"Menus","title":"Menus","text":"CurrentModule = Menus","category":"page"},{"location":"API/menus.html","page":"Menus","title":"Menus","text":"menu","category":"page"},{"location":"API/menus.html#StippleUI.Menus.menu","page":"Menus","title":"StippleUI.Menus.menu","text":"  menu(fieldname::Union{Symbol,Nothing} = nothing, args...; content::Union{String,Vector} = \"\", kwargs...)\n\nThe menu component is a convenient way to show menus. Goes very well with list as dropdown content, but it’s by no means limited to it.   \n\n\n\nExamples\n\n\n\nView\n\njulia> btn(\"Basic Menu\", color=\"primary\", [StippleUI.menu( [p(\"Hello\")])\n\n\n\nArguments\n\n\n\nBehaviour\ntarget::Union{Bool, String} - Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) or a DOM element it attaches the events to the specified DOM element (if it exists) default value. true ex. target!=false target!=\".my-parent\"\nnoparentevent::Bool - Skips attaching events to the target DOM element (that trigger the element to get shown)\ncontextmenu::Bool - Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)\nscrolltarget::Union{String} - CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one ex. scrolltarget=\".scroll-target-class\" scrolltarget=\"#scroll-target-id\" scrolltarget=\"body\"\nPosition\nfit::Bool - Allows the menu to match at least the full width of its target\ncover::Bool - Allows the menu to cover its target. When used, the 'self' and 'fit' props are no longer effective\nanchor::String - Two values setting the starting position or anchor point of the menu relative to its target ex. anchor=\"top left\" anchor=\"bottom right\" anchor=\"center\"\nself::String - Two values setting the menu's own position relative to its target ex. self=\"top left\" self=\"bottom right\" self=\"center\"\noffset::Vector - An array of two numbers to offset the menu horizontally and vertically in pixels ex. [8, 8] [5, 10]\nStyle\ncontentclass::Union{Vector, String, Dict} - Class definitions to be attributed to the content ex. my-special-class contentclass!=\"{ 'my-special-class': <condition> }\"\ncontentstyle::Union{Vector, String, Dict} - Style definitions to be attributed to the content ex. backgroundcolor: #ff0000 contentstyle!=\"{ color: '#ff0000' }\"\ndark::Bool - Notify the component that the background is a dark color\nsquare::Bool - Forces content to have squared borders\nmaxheight::String - The maximum height of the menu; Size in CSS units, including unit name ex. 16px 2rem\nmaxwidth::String - The maximum width of the menu; Size in CSS units, including unit name ex. 16px 2rem\n\n\n\n\n\n","category":"function"}]
}
