var documenterSearchIndex = {"docs":
[{"location":"api/stippleui.html","page":"StippleUI","title":"StippleUI","text":"CurrentModule = StippleUI","category":"page"},{"location":"api/stippleui.html","page":"StippleUI","title":"StippleUI","text":"","category":"page"},{"location":"api/stippleui.html","page":"StippleUI","title":"StippleUI","text":"theme\ndeps\n@click","category":"page"},{"location":"api/stippleui.html#StippleUI.@click","page":"StippleUI","title":"StippleUI.@click","text":"`@click(expr)`\n\nDefines a js routine that is called by a click of the quasar component. If a symbol argument is supplied, @click sets this value to true.\n\n@click(\"savefile = true\") or @click(\"myjs_func();\") or @click(:button)\n\nModifers can be appended:\n\n@click(:me, :native)\n# \"v-on:click.native='me = true'\"\n\n\n\n\n\n","category":"macro"},{"location":"api/separators.html","page":"Separators","title":"Separators","text":"CurrentModule = Separators","category":"page"},{"location":"api/separators.html","page":"Separators","title":"Separators","text":"","category":"page"},{"location":"api/separators.html","page":"Separators","title":"Separators","text":"separator","category":"page"},{"location":"api/spinners.html","page":"Spinners","title":"Spinners","text":"CurrentModule = Spinners","category":"page"},{"location":"api/spinners.html","page":"Spinners","title":"Spinners","text":"","category":"page"},{"location":"api/spinners.html","page":"Spinners","title":"Spinners","text":"spinner","category":"page"},{"location":"api/spinners.html#StippleUI.Spinners.spinner","page":"Spinners","title":"StippleUI.Spinners.spinner","text":"spinner(spinner_type::Union{String,Symbol} = \"\", args...; kwargs...)\n\nA spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct SpinnerModel <: ReactiveModel\n          box::R{String} = \"box\"\n          comment::R{String} = \"comment\"\n          hourglass::R{String} = \"hourglass\"\n       end\n\nView\n\njulia> spinner(color=\"primary\", size=\"3em\")\njulia> spinner(:box, color=\"orange\",size=\"5.5em\")\njulia> spinner(:comment, color=\"green\",size=\"3em\")\njulia> spinner(:hourglass, color=\"purple\", size=\"4em\")\n\n\n\nArguments\n\n\n\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)  ex. 16px  2rem  xs md\ncolor::String - Color name for component from the Color Palette ex. primary teal\nthickness::Int - Override value to use for stroke-width ex. 5\n\n\n\n\n\n","category":"function"},{"location":"api/uploaders.html","page":"Uploaders","title":"Uploaders","text":"CurrentModule = Uploaders","category":"page"},{"location":"api/uploaders.html","page":"Uploaders","title":"Uploaders","text":"","category":"page"},{"location":"api/uploaders.html","page":"Uploaders","title":"Uploaders","text":"uploader","category":"page"},{"location":"api/scrollareas.html","page":"ScrollAreas","title":"ScrollAreas","text":"CurrentModule = ScrollAreas","category":"page"},{"location":"api/scrollareas.html","page":"ScrollAreas","title":"ScrollAreas","text":"","category":"page"},{"location":"api/scrollareas.html","page":"ScrollAreas","title":"ScrollAreas","text":"scrollarea","category":"page"},{"location":"api/tables.html","page":"Tables","title":"Tables","text":"CurrentModule = Tables","category":"page"},{"location":"api/tables.html","page":"Tables","title":"Tables","text":"","category":"page"},{"location":"api/tables.html","page":"Tables","title":"Tables","text":"Column\nDataTablePagination\nDataTableOptions\nDataTable\nactive_columns\ncolumns\nrows\ndata\ntable\nStipple.render\nStipple.watch\nBase.parse","category":"page"},{"location":"api/tables.html#StippleUI.Tables.Column","page":"Tables","title":"StippleUI.Tables.Column","text":"Column(name::String, args...)\n\n\n\nExamples\n\n\n\njulia> Column(\"x2\", align = :right)\n\n\n\nArguments\n\n\n\nrequired::Bool - if we use visiblecolumns, this col will always be visible\nlabel::String - label for header\nalign::Symbol - alignment for cell\nfield::String - row Object property to determine value for this column ex. name\nsortable::Bool - tell table you want this column sortable\n\n\n\n\n\n","category":"type"},{"location":"api/tables.html#StippleUI.Tables.DataTablePagination","page":"Tables","title":"StippleUI.Tables.DataTablePagination","text":"DataTablePagination(sort_by::Symbol, descending::Bool, page::Int, row_per_page::Int)\n\n\n\nExamples\n\n\n\njulia> DataTablePagination(rows_per_page=50)\n\n\n\n\n\n","category":"type"},{"location":"api/tables.html#StippleUI.Tables.DataTableOptions","page":"Tables","title":"StippleUI.Tables.DataTableOptions","text":"DataTableOptions(addid::Bool, idcolumn::String, columns::Union{Vector{Column},Nothing}, columnspecs::Dict{Union{String, Regex}, Dict{Symbol, Any}})\n\n\n\nExamples\n\n\n\njulia> DataTableOptions(columns = [Column(\"x1\"), Column(\"x2\", align = :right)])\n\nColumnspecs\n\nUsage for formating columns\n\njulia> import Stipple.opts\njulia> df = DataFrame(a = sin.(-π:π/10:π), b = cos.(-π:π/10:π), c = string.(rand(21)))\njulia> dt = DataTable(df)\njulia> dt.opts.columnspecs[r\"^(a|b)$\"] = opts(format = jsfunction(raw\"(val, row) => `${100*val.toFixed(3)}%`\"))\njulia> model.table[] = dt \n\n\n\n\n\n","category":"type"},{"location":"api/tables.html#StippleUI.Tables.DataTable","page":"Tables","title":"StippleUI.Tables.DataTable","text":"DataTable(data::T<:DataFrames.DataFrame, opts::DataTableOptions)\n\n\n\nExamples\n\n\n\njulia> df = DataFrame(a = sin.(-π:π/10:π), b = cos.(-π:π/10:π), c = string.(rand(21)))\njulia> dt = DataTable(df)\n\n\n\n\n\n","category":"type"},{"location":"api/tables.html#StippleUI.Tables.columns","page":"Tables","title":"StippleUI.Tables.columns","text":"columns(t::T)::Vector{Column} where {T<:DataTable}\n\njulia> columns = [Column(\"x1\"), Column(\"x2\", align = :right)]\n\n\n\n\n\n","category":"function"},{"location":"api/tables.html#Genie.Renderer.Html.table","page":"Tables","title":"Genie.Renderer.Html.table","text":"table(fieldnmae::Symbol, args...; kwargs...)\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct TableModel <: ReactiveModel\n          data::R{DataTable} = DataTable(DataFrame(rand(100000,2), [\"x1\", \"x2\"]), DataTableOptions(columns = [Column(\"x1\"), Column(\"x2\", align = :right)]))\n          data_pagination::DataTablePagination = DataTablePagination(rows_per_page=50)\n       end\n\nView\n\njulia> table(title=\"Random numbers\", :data; pagination=:data_pagination, style=\"height: 350px;\") \n\n\n\n\n\n","category":"function"},{"location":"api/tables.html#Stipple.watch","page":"Tables","title":"Stipple.watch","text":"`function watch`\n\nAbstract function. Can be used by plugins to define custom Vue.js watch functions.\n\n\n\n\n\n","category":"function"},{"location":"api/bignumbers.html","page":"BigNumbers","title":"BigNumbers","text":"CurrentModule = BigNumbers","category":"page"},{"location":"api/bignumbers.html","page":"BigNumbers","title":"BigNumbers","text":"","category":"page"},{"location":"api/bignumbers.html","page":"BigNumbers","title":"BigNumbers","text":"bignumber","category":"page"},{"location":"api/bignumbers.html#StippleUI.BigNumbers.bignumber","page":"BigNumbers","title":"StippleUI.BigNumbers.bignumber","text":"bignumber(label::String = \"\",           number::Union{Symbol,Number,Nothing} = nothing,           args...;           kwargs...)\n\nRenders a Big Number UI element.\n\nArguments\n\nlabel::Union{String,Symbol}\nnumber::Union{String,Symbol,Nothing,String}\nicon::Union{String,Symbol}\ncolor::Union{String,Symbol} = \"positive\"|\"negative\"\narrow::Union{String,Symbol} = \"up\"|\"down\"\n\n\n\n\n\n","category":"function"},{"location":"api/radios.html","page":"Radios","title":"Radios","text":"CurrentModule = Radios","category":"page"},{"location":"api/radios.html","page":"Radios","title":"Radios","text":"","category":"page"},{"location":"api/radios.html","page":"Radios","title":"Radios","text":"radio","category":"page"},{"location":"api/radios.html#StippleUI.Radios.radio","page":"Radios","title":"StippleUI.Radios.radio","text":"radio(label::AbstractString = \"\", fieldname::Union{Symbol,Nothing} = nothing, args...; kwargs...)\n\nThe radio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct RadioModel <: ReactiveModel\n         shape::R{String} = \"line\"\n       end\n\nView\n\njulia> radio(\"Line\", :shape, val=\"line\")\njulia> radio(\"Rectangle\", :shape, val=\"rectange\")\njulia> radio(\"Ellipse\", :shape, val=\"ellipse\")\njulia> radio(\"Polygon\", :shape, val=\"polygon\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL ex. car_id\nkeep-color::Bool - Should the color (if specified any) be kept when checkbox is unticked?\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value\nLabel\nleftlabel::Bool - Label (if any specified) should be displayed on the left side of the checkbox\nState\ndisable::Bool - Put component in disabled mode\nStyle\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. 16px 2rem xs md\ncolor::String - Color name for component from the Color Palette ex. primary teal-10\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"api/layouts.html","page":"Layouts","title":"Layouts","text":"CurrentModule = Layouts","category":"page"},{"location":"api/layouts.html","page":"Layouts","title":"Layouts","text":"","category":"page"},{"location":"api/layouts.html","page":"Layouts","title":"Layouts","text":"layout\npage_container\npage","category":"page"},{"location":"api/datepickers.html","page":"DatePickers","title":"DatePickers","text":"CurrentModule = DatePickers","category":"page"},{"location":"api/datepickers.html","page":"DatePickers","title":"DatePickers","text":"","category":"page"},{"location":"api/datepickers.html","page":"DatePickers","title":"DatePickers","text":"DateRange\ndatepicker\nDatePicker\nDates.parse\nStipple.render\nBase.convert","category":"page"},{"location":"api/datepickers.html#StippleUI.DatePickers.DateRange","page":"DatePickers","title":"StippleUI.DatePickers.DateRange","text":"DateRange\n\nRepresents a date interval, between start and stop, with a 1 day step.\n\n\n\n\n\n","category":"type"},{"location":"api/datepickers.html#StippleUI.DatePickers.datepicker","page":"DatePickers","title":"StippleUI.DatePickers.datepicker","text":"datepicker()\n\nRenders a date picker (calendar) input element. If the fieldname references a Vector{Date}, the multiple keyword parameter must be passed as true. If the fieldname references a DateRange, the range keyword parameter must be passed as true. If the fieldname references a Vector{DateRange}, both the multiple and the range keyword parameters must be passed as true.\n\n\n\n\n\n","category":"function"},{"location":"api/datepickers.html#Base.parse","page":"DatePickers","title":"Base.parse","text":"parse(type, str; base)\n\nParse a string as a number. For Integer types, a base can be specified (the default is 10). For floating-point types, the string is parsed as a decimal floating-point number.  Complex types are parsed from decimal strings of the form \"R±Iim\" as a Complex(R,I) of the requested type; \"i\" or \"j\" can also be used instead of \"im\", and \"R\" or \"Iim\" are also permitted. If the string does not contain a valid number, an error is raised.\n\ncompat: Julia 1.1\nparse(Bool, str) requires at least Julia 1.1.\n\nExamples\n\njulia> parse(Int, \"1234\")\n1234\n\njulia> parse(Int, \"1234\", base = 5)\n194\n\njulia> parse(Int, \"afc\", base = 16)\n2812\n\njulia> parse(Float64, \"1.2e-3\")\n0.0012\n\njulia> parse(Complex{Float64}, \"3.2e-1 + 4.5im\")\n0.32 + 4.5im\n\n\n\n\n\nparse(::Type{Platform}, triplet::AbstractString)\n\nParses a string platform triplet back into a Platform object.\n\n\n\n\n\nparse(Colorant, desc)\n\nParse a color description.\n\nThis parses a subset of HTML/CSS color specifications. In particular, everything is supported but: currentColor.\n\nIt does support named colors (though it uses X11 named colors, which are slightly different than W3C named colors in some cases), rgb(), hsl(), #RGB, and #RRGGBB syntax.\n\nArguments\n\nColorant: literal Colorant\ndesc: color name or description\n\nA literal Colorant will parse according to the desc string (usually returning an RGB); any more specific choice will return a color of the specified type.\n\nReturns\n\nan RGB{N0f8} color, or\nan HSL color if hsl(h, s, l) was used\nan RGBA color if rgba(r, g, b, a) was used\nan HSLA color if hsla(h, s, l, a) was used\nan ARGB{N0f8} color if 0xAARRGGBB/0xARGB was used\na specific Colorant type as specified in the first argument\n\nnote: Note for X11 named colors\nThe X11 color names with spaces (e.g. \"sea green\") are not recommended because they are not allowed in the SVG/CSS.\n\nnote: Note for hex notations\nYou can parse not only the CSS-style hex notations #RRGGBB/#RGB, but also 0xRRGGBB/0xRGB.You can also parse the 8-digit or 4-digit hex notation into an RGB color with alpha. However, the result depends on the prefix (i.e. # or 0x).julia> parse(Colorant, \"#FF8800AA\") # transparent orange\nRGBA{N0f8}(1.0,0.533,0.0,0.667)\n\njulia> parse(Colorant, \"0xFF8800AA\") # opaque purple\nARGB{N0f8}(0.533,0.0,0.667,1.0)\n\n\n\n\n\n","category":"function"},{"location":"api/datepickers.html#Stipple.render","page":"DatePickers","title":"Stipple.render","text":"`function render`\n\nAbstract function. Needs to be specialized by plugins. It is automatically invoked by Stipple to serialize a Julia data type (corresponding to the fields in the ReactiveModel instance) to JavaScript/JSON. In general the specialized methods should return a Julia Dict which are automatically JSON encoded by Stipple. If custom JSON serialization is required for certain types in the resulting Dict, specialize JSON.lower for that specific type.\n\nExample\n\nfunction Stipple.render(ps::PlotSeries, fieldname::Union{Symbol,Nothing} = nothing)\n  Dict(:name => ps.name, ps.plotdata.key => ps.plotdata.data)\nend\n\nSpecialized JSON rendering for Undefined\n\nJSON.lower(x::Undefined) = \"__undefined__\"\n\n\n\n\n\n","category":"function"},{"location":"api/datepickers.html#Base.convert","page":"DatePickers","title":"Base.convert","text":"convert(T, x)\n\nConvert x to a value of type T.\n\nIf T is an Integer type, an InexactError will be raised if x is not representable by T, for example if x is not integer-valued, or is outside the range supported by T.\n\nExamples\n\njulia> convert(Int, 3.0)\n3\n\njulia> convert(Int, 3.5)\nERROR: InexactError: Int64(3.5)\nStacktrace:\n[...]\n\nIf T is a AbstractFloat or Rational type, then it will return the closest value to x representable by T.\n\njulia> x = 1/3\n0.3333333333333333\n\njulia> convert(Float32, x)\n0.33333334f0\n\njulia> convert(Rational{Int32}, x)\n1//3\n\njulia> convert(Rational{Int64}, x)\n6004799503160661//18014398509481984\n\nIf T is a collection type and x a collection, the result of convert(T, x) may alias all or part of x.\n\njulia> x = Int[1, 2, 3];\n\njulia> y = convert(Vector{Int}, x);\n\njulia> y === x\ntrue\n\nSee also: round, trunc, oftype, reinterpret.\n\n\n\n\n\n","category":"function"},{"location":"api/lists.html","page":"Lists","title":"Lists","text":"CurrentModule = Lists","category":"page"},{"location":"api/lists.html","page":"Lists","title":"Lists","text":"","category":"page"},{"location":"api/lists.html","page":"Lists","title":"Lists","text":"list\nitem\nitem_section\nitemsection\nitem_label\nitemlabel","category":"page"},{"location":"api/knobs.html","page":"Knobs","title":"Knobs","text":"CurrentModule = Knobs","category":"page"},{"location":"api/knobs.html","page":"Knobs","title":"Knobs","text":"","category":"page"},{"location":"api/knobs.html","page":"Knobs","title":"Knobs","text":"knob","category":"page"},{"location":"api/knobs.html#StippleUI.Knobs.knob","page":"Knobs","title":"StippleUI.Knobs.knob","text":"knob()\n\nRenders a knob input element.\n\n\n\n\n\n","category":"function"},{"location":"api/popupproxies.html","page":"PopupProxies","title":"PopupProxies","text":"CurrentModule = PopupProxies","category":"page"},{"location":"api/popupproxies.html","page":"PopupProxies","title":"PopupProxies","text":"","category":"page"},{"location":"api/popupproxies.html","page":"PopupProxies","title":"PopupProxies","text":"popup_proxy\nPopupProxy\nBase.string","category":"page"},{"location":"api/popupproxies.html#StippleUI.PopupProxies.popup_proxy","page":"PopupProxies","title":"StippleUI.PopupProxies.popup_proxy","text":"popup_proxy()\n\nRenders a popup.\n\n\n\n\n\n","category":"function"},{"location":"api/popupproxies.html#Base.string","page":"PopupProxies","title":"Base.string","text":"string(n::Integer; base::Integer = 10, pad::Integer = 1)\n\nConvert an integer n to a string in the given base, optionally specifying a number of digits to pad to.\n\nSee also digits, bitstring, count_zeros.\n\nExamples\n\njulia> string(5, base = 13, pad = 4)\n\"0005\"\n\njulia> string(-13, base = 5, pad = 4)\n\"-0023\"\n\n\n\n\n\nstring(xs...)\n\nCreate a string from any values using the print function.\n\nstring should usually not be defined directly. Instead, define a method print(io::IO, x::MyType). If string(x) for a certain type needs to be highly efficient, then it may make sense to add a method to string and define print(io::IO, x::MyType) = print(io, string(x)) to ensure the functions are consistent.\n\nSee also: String, repr, sprint, show.\n\nExamples\n\njulia> string(\"a\", 1, true)\n\"a1true\"\n\n\n\n\n\n","category":"function"},{"location":"api/selects.html","page":"Selects","title":"Selects","text":"CurrentModule = Selects","category":"page"},{"location":"api/selects.html","page":"Selects","title":"Selects","text":"","category":"page"},{"location":"api/selects.html","page":"Selects","title":"Selects","text":"select","category":"page"},{"location":"api/selects.html#Genie.Renderer.Html.select","page":"Selects","title":"Genie.Renderer.Html.select","text":"select(fieldname::Symbol, args...; options::Symbol, kwargs...)\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct SelectModel <: ReactiveModel\n          model::R{Vector{String}} = []\n          networks::R{Vector{String}} = [\"Google\", \"Facebook\", \"Twitter\", \"Pinterest\", \"Reddit\"]\n       end\n\nView\n\njulia> select(:model, options= :networks, useinput=true, multiple=true, clearable = true, filled = true, counter = true, usechips = true, label=\"Social Networks\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists ex. car-id car-id\nvirtualscrollhorizontal::Bool - Make virtual list work in horizontal mode\nerror::Bool - Does field have validation errors?\nrules::Vector - Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules  rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"\nreactiverules::Bool - By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it\nlazyrules::Union{Bool, String} - If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper form submits itself ex. (Boolean) true (Boolean) false ondemand\nloading::Bool - Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.\nclearable::Bool - Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null\nautofocus::Bool - Focus field on initial component render\nfor::String - Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well myFieldsId\nhidedropdownicon::Bool - Hide dropdown icon\nfillinput::Bool - Fills the input with current value; Useful along with 'hideselected'; Does NOT works along with 'multiple' selection\nnewvaluemode::String - Enables creation of new values and defines behavior when a new value is added: 'add' means it adds the value (even if possible duplicate), 'add-unique' adds only unique values, and 'toggle' adds or removes the value (based on if it exists or not already); When using this prop then listening for newvalue becomes optional (only to override the behavior defined by newvaluemode)  ex. add add-unique toggle\nautocomplete::String - Autocomplete attribute for field ex. autocomplete=\"country\"\ntransitionshow::String - Transition when showing the menu/dialog; One of embedded transitions ex. fade slide-down\ntransitionhide::String - Transition when hiding the menu/dialog; One of embedded transitions ex. fade slide-down\nbehavior::String - Overrides the default dynamic mode of showing as menu on desktop and dialog on mobiles default menu dialog\nContent\ntablecolspan::Union{Int, String} - The number of columns in the table (you need this if you use table-layout: fixed) ex. tablecolspan=\"12\"\nerrormessage::String - Validation error message (gets displayed only if 'error' is set to 'true') ex. Username must have at least 5 characters\nnoerroricon::Bool - Hide error icon when there is an error\nlabel::String - A text label that will “float” up above the input field, once the field gets focus ex. Username\nstacklabel::Bool - Label will be always shown above the field regardless of field content (if any)\nhint::String - Helper (hint) text which gets placed below your wrapped form component ex. Fill in between 3 and 12 characters\nhidehint::Bool - Hide the helper (hint) text when field doesn't have focus\nprefix::String - Prefix ex. $\nsuffix::String - Suffix ex. @gmail.com\nloading::Bool - Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.\nclearable::Bool - Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null\nclearicon::String - Custom icon to use for the clear button when using along with 'clearable' attribute ex. close\nlabelslot::Bool - Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set\nbottomslots::Bool - Enables bottom slots ('error', 'hint', 'counter')\ncounter::Bool - Show an automatic counter on bottom right\ndropdownicon::String - Icon name; ; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. map ion-add img=https://cdn.quasar.dev/logo/svg/quasar-logo.svg img=path/to/some_image.png\nuseinput::Bool - Use an input tag where users can type\ninputdebounce::Union{Int, String} - Debounce the input model update with an amount of milliseconds ex. 500 600\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value ex. 0 100\nModel\nmultiple::Bool - Allow multiple selection; Model must be Array\nemitvalue::Bool - Update model with the value of the selected option instead of the whole option\nOptions\noptions::Vector - Available options that the user can select from. For best performance freeze the list of options ex. options=[ 'BMW', 'Samsung Phone' ]\noptionvalue::String - Property of option which holds the 'value'; If using a function then for best performance, reference it from your scope and do not define it inline ex. optionvalue=modelNumber optionvalue=\"(item) => item === null ? null : item.modelNumber\"\noptionlabel::String - Property of option which holds the 'label'; If using a function then for best performance, reference it from your scope and do not define it inline ex. optionlabel=itemName optionlabel=\"(item) => item === null ? null : item.itemName\"\noptiondisable::String - Property of option which tells it's disabled; The value of the property must be a Boolean; If using a function then for best performance, reference it from your scope and do not define it inline ex. optiondisable=cannotSelect optiondisable=\"(item) => item === null ? null : item.cannotSelect\"\noptionsdense::Bool - Dense mode for options list; occupies less space\noptionsdark::Bool - Options menu will be colored with a dark color\noptionsselectedclass::String - CSS class name for options that are active/selected; Set it to an empty string to stop applying the default (which is text-* where * is the 'color' prop value) ex. text-orange\noptionssanitize::Bool - Force use of textContent instead of innerHTML to render options; Use it when the options might be unsafe (from user input); Does NOT apply when using 'option' slot!\noptionscover::Bool - Expanded menu will cover the component (will not work along with useinput attribute for obvious reasons)\nmenushrink::Bool - Allow the options list to be narrower than the field (only in menu mode)\nmapoptions::Bool - Try to map labels of model from options Vector; has a small performance penalty; If you are using emit-value you will probably need to use map-options to display the label text in the select field rather than the value; Refer to the 'Affecting model' section above\nPosition\nmenuanchor::String - Two values setting the starting position or anchor point of the options list relative to the field (only in menu mode) ex. top left top middle top right top start top end center left center middle center right center start center end bottom left bottom middle bottom right bottom start bottom end\nmenuself::String - Two values setting the options list's own position relative to its target (only in menu mode) ex. top left etc\nmenuoffset::Vector - An array of two numbers to offset the options list horizontally and vertically in pixels (only in menu mode) ex. [8, 8]\nSelection\nmultiple::Bool - Allow multiple selection; Model must be Array\ndisplayvalue::Union{Int, String} - Override default selection string, if not using selected slot/scoped slot and if not using usechips attribute\ndisplayvaluesanitize::Bool - Force use of textContent instead of innerHTML to render selected option(s); Use it when the selected option(s) might be unsafe (from user input); Does NOT apply when using selected or selecteditem slots!\nhideselected::Bool - Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non multiple Selects\nmaxvalues::Union{Int, String} - Allow a maximum number of selections that the user can do ex. 5\nusechips::Bool - Use chip component to show what is currently selected\nState\ndisable::Bool - Put component in disabled mode\nreadonly::Bool - Put component in readonly mode\nStyle\nlabelcolor::String - Color name for the label from the Color Palette; Overrides the color prop; The difference from color prop is that the label will always have this color, even when field is not focused ex. primary teal-10\ncolor::String - Color name for component from the Color Palette\nbgcolor::String - Background color name for component from the Color Palette\ndark::Bool - Notify the component that the background is a dark color\nfilled::Bool - Use filled design for the field\noutlined::Bool - Use outlined design for the field\nborderless::Bool - Use borderless design for the field\nstandout::Union{Bool, String} - Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones) ex. standout standout=\"bg-primary text-white\"\nhidebottomspace::Bool - Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content\nrounded::Bool - Applies a small standard border-radius for a squared shape of the component\nsquare::Bool - Remove border-radius so borders are squared; Overrides rounded prop/attribute\ndense::Bool - Dense mode; occupies less space\nitemaligned::Bool - Match inner content alignment to that of item component\npopupcontentclass::String - Class definitions to be attributed to the popup content ex. my-special-class\npopupcontentstyle::Union{Vector, String, Dict} - Style definitions to be attributed to the popup content ex. background-color: #ff0000 popupcontentstyle!=\"{ backgroundColor: '#ff0000' }\"\ninputclass::Union{Vector, String, Dict} - Class definitions to be attributed to the underlying input tag ex. my-special-class inputclass!=\"{ 'my-special-class': <condition> }\"\ninputstyle::Union{Vector, String, Dict} - Style definitions to be attributed to the underlying input tag ex. background-color: #ff0000 inputstyle!=\"{ backgroundColor: '#ff0000' }\"\nVirtual-scroll\nvirtualscrollslicesize::Union{Int, String} - Minimum number of items to render in the virtual list ex. virtualscrollslicesize=\"60\" 30\nvirtualscrollsliceratiobefore::Union{Int, String} - Ratio of number of items in visible zone to render before it ex. virtualscrollsliceratiobefore=\"30\" 30\nvirtualscrollsliceratioafter::Union{Int, String} - Ratio of number of items in visible zone to render after it ex. virtualscrollsliceratioafter=\"0.3\"\nvirtualscrollitemsize::Union{Int, String} - Default size in pixels (height if vertical, width if horizontal) of an item; This value is used for rendering the initial list; Try to use a value close to the minimum size of an item  ex. virtualscrollitemsize=\"48\"\nvirtualscrollstickysizestart::Union{Int, String} - Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the start of the list; A correct value will improve scroll precision ex. 0 virtualscrollstickysizestart=\"23\nvirtualscrollstickysizeend::Union{Int, String} - Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the end of the list; A correct value will improve scroll precision ex. 0\ntablecolspan::Union{Int, String} - The number of columns in the table (you need this if you use table-layout: fixed) ex. tablecolspan=\"3\"\n\n\n\n\n\n","category":"function"},{"location":"api/menus.html","page":"Menus","title":"Menus","text":"CurrentModule = Menus","category":"page"},{"location":"api/menus.html","page":"Menus","title":"Menus","text":"","category":"page"},{"location":"api/menus.html","page":"Menus","title":"Menus","text":"menu","category":"page"},{"location":"api/badges.html","page":"Badges","title":"Badges","text":"CurrentModule = Badges","category":"page"},{"location":"api/badges.html","page":"Badges","title":"Badges","text":"","category":"page"},{"location":"api/badges.html","page":"Badges","title":"Badges","text":"badge\nBadge","category":"page"},{"location":"api/badges.html#StippleUI.Badges.badge","page":"Badges","title":"StippleUI.Badges.badge","text":"floating::Bool = false transparent::Bool = false multiline::Bool = true label::String = \"Label\" align::String = \"top\" # middle, bottom outline::Bool = true color::String = \"blue\" textcolor::String = \"teal-10\"\n\n\n\n\n\n","category":"function"},{"location":"api/spaces.html","page":"Spaces","title":"Spaces","text":"CurrentModule = Spaces","category":"page"},{"location":"api/spaces.html","page":"Spaces","title":"Spaces","text":"","category":"page"},{"location":"api/spaces.html","page":"Spaces","title":"Spaces","text":"space","category":"page"},{"location":"api/checkboxes.html","page":"Checkboxes","title":"Checkboxes","text":"CurrentModule = Checkboxes","category":"page"},{"location":"api/checkboxes.html","page":"Checkboxes","title":"Checkboxes","text":"","category":"page"},{"location":"api/checkboxes.html","page":"Checkboxes","title":"Checkboxes","text":"checkbox","category":"page"},{"location":"api/checkboxes.html#StippleUI.Checkboxes.checkbox","page":"Checkboxes","title":"StippleUI.Checkboxes.checkbox","text":"checkbox(label, fieldname, args...; kwargs...)\n\nThe checkbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct CheckboxModel <: ReactiveModel\n          valone::R{Bool} = true\n       end\n\nView\n\njulia> checkbox(label = \"Apples\", fieldname = :valone, dense = true, size = \"xl\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\nindeterminatevalue::Union{String, Float64, Int, Bool} - What model value should be considered as 'indeterminate'?\ntoggleorder::String - Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ... ex. tf ft\ntoggleindeterminate::Bool - When user clicks/taps on the component, should we toggle through the indeterminate state too?\nkeepcolor::Bool - Should the color (if specified any) be kept when the component is unticked/ off?\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value\nLabel\nlabel::String - Label to display along the component\nleftlabel::Bool - Label (if any specified) should be displayed on the left side of the component\nModel\nfieldname::Symbol - Model of the component\nval::Union{String, Float64, Int, Bool} - Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked\ntruevalue::Union{Int, Float64, String} - What model value should be considered as checked/ticked/on?\nfalsevalue::Union{Int, Float64, String} - What model value should be considered as unchecked/unticked/off?\nState\ndisable::Bool - Put component in disabled mode\nStyle\nsize::String- Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. 16px 2rem xs md\ncolor::String - Color name for component from the Color Palette eg. primary teal-10\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"api/dashboards.html","page":"Dashboards","title":"Dashboards","text":"CurrentModule = Dashboards","category":"page"},{"location":"api/dashboards.html","page":"Dashboards","title":"Dashboards","text":"","category":"page"},{"location":"api/dashboards.html","page":"Dashboards","title":"Dashboards","text":"dashboard","category":"page"},{"location":"api/buttons.html","page":"Buttons","title":"Buttons","text":"CurrentModule = Buttons","category":"page"},{"location":"api/buttons.html","page":"Buttons","title":"Buttons","text":"","category":"page"},{"location":"api/buttons.html","page":"Buttons","title":"Buttons","text":"btn\nBtn\nbtngroup","category":"page"},{"location":"api/buttons.html#StippleUI.Buttons.btn","page":"Buttons","title":"StippleUI.Buttons.btn","text":"Stipple has a component called btn which is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect baked in (which can be disabled).\n\nThe button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.\n\nWhen not disabled or spinning, btn emits a @click event, as soon as it is clicked or tapped.\n\nExamples\n\njulia> btn(\"Move Left\", color = \"primary\", icon = \"mail\", @click(\"press_btn = true\"))\n\njulia> btn(\"Go to Hello World\", color = \"red\", type = \"a\", href = \"hello\", icon = \"map\", iconright = \"send\")\n\njulia> btn(\"Connect to server!\", color=\"green\", textcolor=\"black\", @click(\"btnConnect=!btnConnect\"), [\n          tooltip(contentclass=\"bg-indigo\", contentstyle=\"font-size: 16px\", \n          style=\"offset: 10px 10px\",  \"Ports bounded to sockets!\")]\n       )       \n\n\n\n\n\n","category":"function"},{"location":"api/buttons.html#StippleUI.Buttons.btngroup","page":"Buttons","title":"StippleUI.Buttons.btngroup","text":"You can conveniently group btn and btndropdown using btngroup. Be sure to check those component’s respective pages to see their props and methods.\n\n\n\n\n\n","category":"function"},{"location":"api/editors.html","page":"Editors","title":"Editors","text":"CurrentModule = Editors","category":"page"},{"location":"api/editors.html","page":"Editors","title":"Editors","text":"","category":"page"},{"location":"api/editors.html","page":"Editors","title":"Editors","text":"editor","category":"page"},{"location":"api/editors.html#StippleUI.Editors.editor","page":"Editors","title":"StippleUI.Editors.editor","text":"editor(fieldname, args...; kwargs...)\n\nComponent is a WYSIWYG (“what you see is what you get”) editor component that enables the user to write and even paste HTML.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct EditorModel <: ReactiveModel\n          s_editor::R{String} = \"What you see is <b>what</b> you get.\"\n       end\n\nView\n\njulia> editor(:s_editor, minheight=\"5rem\")\n\njulia> StippleUI.form( autocorrect=\"off\", autocapitalize=\"off\", autocomplete=\"off\", spellcheck=\"false\", [\n          editor(:s_editor)\n       ])\n\n\n\nArguments\n\n\n\nBehaviour\nfullscreen::Bool - Fullscreen mode (Note\".sync\" modifier required!) Example. :fullscreen.sync=\"isFullscreen\"\nnoroutefullscreenexit::Bool - Changing route app won't exit fullscreen\nparagraphtag::String - Paragraph tag to be used Example. div, p\nContent\n\nLabel\n\nModel\n\nState\n\nStyle\n\nToolbar\n\n\n\n\n\n\n","category":"function"},{"location":"api/ranges.html","page":"Ranges","title":"Ranges","text":"CurrentModule = Ranges","category":"page"},{"location":"api/ranges.html","page":"Ranges","title":"Ranges","text":"","category":"page"},{"location":"api/ranges.html","page":"Ranges","title":"Ranges","text":"RangeData\nBase.range\nslider\nStipple.render\nBase.parse","category":"page"},{"location":"api/ranges.html#Base.range","page":"Ranges","title":"Base.range","text":"range(start, stop, length)\nrange(start, stop; length, step)\nrange(start; length, stop, step)\nrange(;start, length, stop, step)\n\nConstruct a specialized array with evenly spaced elements and optimized storage (an AbstractRange) from the arguments. Mathematically a range is uniquely determined by any three of start, step, stop and length. Valid invocations of range are:\n\nCall range with any three of start, step, stop, length.\nCall range with two of start, stop, length. In this case step will be assumed\n\nto be one. If both arguments are Integers, a UnitRange will be returned.\n\nExamples\n\njulia> range(1, length=100)\n1:100\n\njulia> range(1, stop=100)\n1:100\n\njulia> range(1, step=5, length=100)\n1:5:496\n\njulia> range(1, step=5, stop=100)\n1:5:96\n\njulia> range(1, 10, length=101)\n1.0:0.09:10.0\n\njulia> range(1, 100, step=5)\n1:5:96\n\njulia> range(stop=10, length=5)\n6:10\n\njulia> range(stop=10, step=1, length=5)\n6:1:10\n\njulia> range(start=1, step=1, stop=10)\n1:1:10\n\nIf length is not specified and stop - start is not an integer multiple of step, a range that ends before stop will be produced.\n\njulia> range(1, 3.5, step=2)\n1.0:2.0:3.0\n\nSpecial care is taken to ensure intermediate values are computed rationally. To avoid this induced overhead, see the LinRange constructor.\n\ncompat: Julia 1.1\nstop as a positional argument requires at least Julia 1.1.\n\ncompat: Julia 1.7\nThe versions without keyword arguments and start as a keyword argument require at least Julia 1.7.\n\n\n\n\n\n","category":"function"},{"location":"api/ranges.html#StippleUI.Ranges.slider","page":"Ranges","title":"StippleUI.Ranges.slider","text":"slider(range::AbstractRange{T} where T <: Real, fieldname::Union{Symbol,Nothing} = nothing, args...; lazy = false, kwargs...)\n\nThe slider is a great way for the user to specify a number value between a minimum and maximum value, with optional steps between valid values. The slider also has a focus indicator (highlighted slider button), which allows for keyboard adjustments of the slider.\n\nExamples\n\n\n\nView\n\njulia> slider(1:5:100)\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL ex. car_id\nsnap::Bool - Snap on valid values, rather than sliding freely; Suggestion: use with 'step' property\nreverse::Bool - Work in reverse (changes direction)\nvertical::Bool - Display in vertical direction\nlabelalways::Bool - Always display the label\nContent\nlabel::Bool - Popup a label when user clicks/taps on the slider thumb and moves it\nmarkers::Union{Bool, Int} - Display markers on the track, one for each possible value for the model or using a custom step (when specifying a Number) ex. markers markers=\"5\"\ndragrange::Bool - User can drag range instead of just the two thumbs\ndragonlyrange::Bool - User can drag only the range instead and NOT the two thumbs\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value ex. 0 100\nLabels\nlabelcolorleft::String - Color name for left label background from the Color Palette ex. primary teal-10\nlabeltextcolorleft::String - Color name for left label text from the Color Palette ex. primary teal-10\nlabelcolorright::String - Color name for right label background from the Color Palette ex. primary teal-10\nlabeltextcolorright::String - Color name for right label text from the Color Palette ex. primary teal-10\nlabelvalueleft::Union{String, Int} - Override default label for min value ex. labelvalueleft=\"model.min + 'px'\"\nlabelvalueright::Union{String, Int} - Override default label for max value ex. labelvalueright=\"model.max + 'px'\"\nModel\nrange::AbstractRange{T} - The range of values to select from min:step:max\nState\ndisable::Bool - Put component in disabled mode\nreadonly::Bool - Put component in readonly mode\nStyle\ncolor::String - Color name for component from the Color Palette ex. primary teal-10\nlabelcolor::String - Color name for component from the Color Palette ex. primary teal-10\nthumbpath::String - Set custom thumb svg path ex. M5 5 h10 v10 h-10 v-10\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\n\n\n\n\n\n","category":"function"},{"location":"api/dialogs.html","page":"Dialogs","title":"Dialogs","text":"CurrentModule = Dialogs","category":"page"},{"location":"api/dialogs.html","page":"Dialogs","title":"Dialogs","text":"","category":"page"},{"location":"api/dialogs.html","page":"Dialogs","title":"Dialogs","text":"dialog","category":"page"},{"location":"api/dialogs.html#StippleUI.Dialogs.dialog","page":"Dialogs","title":"StippleUI.Dialogs.dialog","text":"dailog()\n\nThe dialog` component is a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).\n\nTIP: Dialogs can also be used as a globally available method for more basic use cases, like the native JS alert(), prompt(), etc.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct DialogModel <: ReactiveModel\n         show_dialog::R{Bool} = false\n       end\n\nView\n\njulia> Html.div(class=\"q-pa-md q-gutter-sm\", [\n        btn(\"Alert\", color=\"primary\", @click(\"show_dialog = true\")),\n        StippleUI.dialog(:show_dialog, [\n          card([\n            card_section(Html.div(class=\"text-h6\", \"Alert\")),\n            card_section(class=\"q-pt-none\", \"Lorem ipsum dolor sit amet consectetur adipisicing elit. \n            Rerum repellendus sit voluptate voluptas eveniet porro. Rerum blanditiis perferendis totam, \n            ea at omnis vel numquam exercitationem aut, natus minima, porro labore.\")\n          ])\n        ])\n      ])\n\n\n\nArguments\n\n\n\nBehaviour\npersistent::Bool - User cannot dismiss Dialog if clicking outside of it or hitting ESC key; Also, an app route change won't dismiss it\nnoesc::Bool - User cannot dismiss Dialog by hitting ESC key; No need to set it if 'persistent' property is also set\nnobackdrop::Bool - User cannot dismiss Dialog by clicking outside of it; No need to set it if 'persistent' property is also set\nautoclose::Bool - Any click/tap inside of the dialog will close it\ntransitionshow::String - One of the embedded transitions eg. fade, slide-down\ntransitionhide::String - One of the embedded transitions eg. fade, slide-down\nnorefocus::Bool - (Accessibility) When Dialog gets hidden, do not refocus on the DOM element that previously had focus\nnofocus::Bool - (Accessibility) When Dialog gets shown, do not switch focus on it\nContent\nseamless::Bool - Put Dialog into seamless mode; Does not use a backdrop so user is able to interact with the rest of the page too\nmaximized::Bool - Put Dialog into maximized mode\nfullwidth::Bool - Dialog will try to render with same width as the window\nfullheight::Bool - Dialog will try to render with same height as the window\nposition::String - Stick dialog to one of the sides (top, right, bottom or left)\nStyle\ncontentclass::Union{Array, String} - Class definitions to be attributed to the content eg. my-special-class :content-class=\"{ 'my-special-class': <condition> }\"\ncontentstyle::Union{Array, String} - Style definitions to be attributed to the content eg. background-color: #ff0000 :content-style=\"{ color: '#ff0000' }\"\nsquare::Bool - Forces content to have squared borders\n\n\n\n\n\n","category":"function"},{"location":"api/chips.html","page":"Chips","title":"Chips","text":"CurrentModule = Chips","category":"page"},{"location":"api/chips.html","page":"Chips","title":"Chips","text":"","category":"page"},{"location":"api/chips.html","page":"Chips","title":"Chips","text":"chip","category":"page"},{"location":"api/banners.html","page":"Banners","title":"Banners","text":"CurrentModule = Banners","category":"page"},{"location":"api/banners.html","page":"Banners","title":"Banners","text":"","category":"page"},{"location":"api/banners.html","page":"Banners","title":"Banners","text":"banner","category":"page"},{"location":"api/drawers.html","page":"Drawers","title":"Drawers","text":"CurrentModule = Drawers","category":"page"},{"location":"api/drawers.html","page":"Drawers","title":"Drawers","text":"","category":"page"},{"location":"api/drawers.html","page":"Drawers","title":"Drawers","text":"drawer","category":"page"},{"location":"api/intersections.html","page":"Intersections","title":"Intersections","text":"CurrentModule = Intersections","category":"page"},{"location":"api/intersections.html","page":"Intersections","title":"Intersections","text":"","category":"page"},{"location":"api/intersections.html","page":"Intersections","title":"Intersections","text":"intersection","category":"page"},{"location":"api/API.html","page":"API","title":"API","text":"CurrentModule = API","category":"page"},{"location":"api/API.html","page":"API","title":"API","text":"","category":"page"},{"location":"api/API.html","page":"API","title":"API","text":"ATTRIBUTES_MAPPINGS\nattributes\nq__elem\nxelem\nquasar\nvue\nxelem_pure\nquasar_pure\nvue_pure\ncsscolors","category":"page"},{"location":"api/API.html#StippleUI.API.csscolors","page":"API","title":"StippleUI.API.csscolors","text":"`csscolors(name, color)`\n`csscolors(names, colors)`\n`csscolors(prefix, colors)`\n\nConstruct a css string that defines colors to be used for styling quasar elements.\n\nUsage\n\ncss = styles(csscolors(:stipple, [RGB(0.2, 0.4, 0.8), \"#123456\", RGBA(0.1, 0.2, 0.3, 0.5)]))\n\nui() = css * dashboard(vm(model), class=\"container\", [   btn(\"Hit me\", @click(:pressed), color=\"stipple-3\") ])\n\n\n\n\n\n","category":"function"},{"location":"api/cards.html","page":"Cards","title":"Cards","text":"CurrentModule = Cards","category":"page"},{"location":"api/cards.html","page":"Cards","title":"Cards","text":"","category":"page"},{"location":"api/cards.html","page":"Cards","title":"Cards","text":"card\ncard_section\ncard_actions","category":"page"},{"location":"api/cards.html#StippleUI.Cards.card","page":"Cards","title":"StippleUI.Cards.card","text":"card()\n\nCard component is a great way to display important pieces of grouped content. The Card component is intentionally lightweight and essentially a containing element that is capable of “hosting” any other component that is appropriate.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct CardModel <: ReactiveModel\n          lorem::R{String} = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n          url::R{String} = \"https://cdn.quasar.dev/img/parallax2.jpg\"\n       end\n\nView\n\njulia> card(class=\"my-card\", [\n          imageview(src=:url, basic=true, [\n            Html.div(\"Title\", class=\"absolute-bottom text-h6\")\n          ]),\n          card_section(\"{{lorem}}\")\n       ])\n\n\n\nArguments\n\n\n\ndark::Bool - Notify the component that the background is a dark color\nsquare::Bool - Removes border-radius so borders are squared\nflat::Bool - Applies a 'flat' design (no default shadow)\nbordered::Bool - Applies a default border to the component\n\n\n\n\n\n","category":"function"},{"location":"api/cards.html#StippleUI.Cards.card_section","page":"Cards","title":"StippleUI.Cards.card_section","text":"card_section()\n\n\n\nExamples\n\n\n\nView\n\njulia> card(class=\"text-white\", style=\"background: radial-gradient(circle, #35a2ff 0%, #014a88 100%); width: 30%\", [\n          card_section(\"lorLorem Ipsum is simply dummy text of the printing \n          and typesetting industry\")\n       ])\n\n\n\nArguments\n\n\n\ntag::String - HTML tag to render ex. div, form\nhorizontal::Bool - Display a horizontal section (will have no padding and can contain other card_section)\n\n\n\n\n\n","category":"function"},{"location":"api/cards.html#StippleUI.Cards.card_actions","page":"Cards","title":"StippleUI.Cards.card_actions","text":"\n\nExamples\n\n\n\ncard_actions()\n\nModel\n\njulia> @reactive mutable struct CardModel <: ReactiveModel\n          lorem::R{String} = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n       end\n\nView\n\njulia> card(class=\"my-card bg-secondary text-white\", [\n          card_section([\n            Html.div(\"Our Changing Planet\", class=\"text-h6\"),\n            Html.div(\"by John Doe\", class=\"text-subtitle2\")\n          ]),\n          card_section(\"{{ lorem }}\"),\n          card_actions([\n            btn(flat=true, \"Action 1\"),\n            btn(flat=true, \"Action2\")\n          ])\n        ])\n\n\n\nArguments\n\n\n\nalign::String - Specify how to align the actions (left, center, right, between, around, evenly, stretch)\nvertical:Bool - Display actions one below the other\n\n\n\n\n\n","category":"function"},{"location":"api/innerloaders.html","page":"InnerLoaders","title":"InnerLoaders","text":"CurrentModule = InnerLoaders","category":"page"},{"location":"api/innerloaders.html","page":"InnerLoaders","title":"InnerLoaders","text":"","category":"page"},{"location":"api/innerloaders.html","page":"InnerLoaders","title":"InnerLoaders","text":"innerloader","category":"page"},{"location":"api/toggles.html","page":"Toggles","title":"Toggles","text":"CurrentModule = Toggles","category":"page"},{"location":"api/toggles.html","page":"Toggles","title":"Toggles","text":"","category":"page"},{"location":"api/toggles.html","page":"Toggles","title":"Toggles","text":"toggle","category":"page"},{"location":"api/toggles.html#StippleUI.Toggles.toggle","page":"Toggles","title":"StippleUI.Toggles.toggle","text":"toggle(label::String, fieldname::Union{Symbol,Nothing}, args...; kwargs...)\n\nThe toggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive mutable struct ToggleModel <: ReactiveModel\n          value::R{Bool} = false\n          selection::R{Vector{String}} = [\"yellow\", \"red\"]\n       end\n\nView\n\njulia> toggle(\"Blue\", color=\"blue\", :selection, val=\"blue\")\njulia> toggle(\"Yellow\", color=\"yellow\", :selection, val=\"yellow\")\njulia> toggle(\"Green\", color=\"green\", :selection, val=\"green\")\njulia> toggle(\"Red\", color=\"red\", :selection, val=\"red\")\n\n\n\nArguments\n\n\n\nBehaviour\nname::String - Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL ex. car_id\nindeterminatevalue::Union{Int, Float64, String, Bool} - What model value should be considered as 'indeterminate'? default value: null ex. 0 not_answered\ntoggleorder::String - Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ... default tf ex. tf ft\ntoggleindeterminate::Bool - When user clicks/taps on the component, should we toggle through the indeterminate state too?\nkeepcolor::Bool - Should the color (if specified any) be kept when the component is unticked/ off?\nContent\nicon::String - Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real estate will still be used for it) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg img:path/to/some_image.png\n\nGeneral\ntabindex::Union{Int, String} - Tabindex HTML attribute value 0 100\nIcons\ncheckedicon::String - The icon to be used when the toggle is on ex. visibility\nuncheckedicon::String - The icon to be used when the toggle is off ex. visibility-off\nindeterminateicon::String - The icon to be used when the model is indeterminate ex. help\nLabel\nlabel::String - Label to display along the component ex. I agree to terms and conditions\nleftlabel::Bool - Label (if any specified) should be displayed on the left side of the component\nModel\nval::Union{Bool, Int, Float64, String, Vector} - Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked ex. car\ntruevalue::Union{Bool, Int, Float64, String, Vector} - What model value should be considered as checked/ticked/on? default true ex. Agreed\nfalsevalue::Union{Bool, Int, Float64, String, Vector} - What model value should be considered as unchecked/unticked/off? default false ex. Not agreed\nState\ndisabled::Bool - Put component in disabled mode\nstyle\nsize::String - Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) ex. 16px 1.5rem xs md\ncolor::String - Color name for component from the Color Palette ex. primary teal-10\ndark::Bool - Notify the component that the background is a dark color\ndense::Bool - Dense mode; occupies less space\niconcolor - Override default icon color (for truthy state only); Color name for component from the Color Palette ex. primary teal-10\n\n\n\n\n\n","category":"function"},{"location":"api/forminputs.html","page":"FormInputs","title":"FormInputs","text":"CurrentModule = FormInputs","category":"page"},{"location":"api/forminputs.html","page":"FormInputs","title":"FormInputs","text":"","category":"page"},{"location":"api/forminputs.html","page":"FormInputs","title":"FormInputs","text":"textfield\nnumberfield\ntextarea\nfilefield","category":"page"},{"location":"api/forminputs.html#StippleUI.FormInputs.textfield","page":"FormInputs","title":"StippleUI.FormInputs.textfield","text":"textfield(fieldname, args...; kwargs...)\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive! mutable struct TextField <: ReactiveModel\n          name::R{String} = \"\"\n       end\n\nView\n\njulia> textfield(\"What's your name *\", :name, name = \"name\", @iif(:warin), :filled, hint = \"Name and surname\", \"lazy-rules\",\n          rules = \"[val => val && val.length > 0 || 'Please type something']\"\n       )\n\n\n\nArguments\n\n\n\ntype::String - Must be one of the following: text (default), textarea, email, tel, number, password and url. This is important as it determines the keyboard type popping up on mobile devices.\nreadonly::Bool - If set to true, textfield is readonly and the user cannot change value.\nclearable::Bool - If set to true, the component offers the user an actionable icon to remove the entered text.\n\nWhen you set type to “number”, there are some additional properties that you can use:\n\n\n\n\n\n\n\n","category":"function"},{"location":"api/forms.html","page":"Forms","title":"Forms","text":"CurrentModule = Forms","category":"page"},{"location":"api/forms.html","page":"Forms","title":"Forms","text":"","category":"page"},{"location":"api/forms.html","page":"Forms","title":"Forms","text":"form","category":"page"},{"location":"api/forms.html#StippleUI.Forms.form","page":"Forms","title":"StippleUI.Forms.form","text":"form(args...; noresetfocus::Bool = false, kwargs...)\n\nThe form component renders a <form> DOM element and allows you to easily validate child form components (like input, select or your field wrapped components) that have the internal validation (NOT the external one) through rules associated with them.\n\n\n\nExamples\n\n\n\nModel\n\njulia> @reactive! mutable struct FormModel <: ReactiveModel\n          name::R{String} = \"\"\n          age::R{Int} = 0\n          warin::R{Bool} = true\n       end\n\nView\n\njulia> StippleUI.form(action = \"/sub\", method = \"POST\", [\n          textfield(\"What's your name *\", :name, name = \"name\", @iif(:warin), :filled, hint = \"Name and surname\", \"lazy-rules\",\n            rules = \"[val => val && val.length > 0 || 'Please type something']\"\n          ),\n          numberfield(\"Your age *\", :age, name = \"age\", \"filled\", :lazy__rules,\n            rules = \"[val => val !== null && val !== '' || 'Please type your age',\n              val => val > 0 && val < 100 || 'Please type a real age']\"\n          ),\n          btn(\"submit\", type = \"submit\", color = \"primary\")\n       ])\n\n\n\nArguments\n\n\n\nautofocus::Bool - Focus first focusable element on initial component render\nnoerrorfocus::Bool - Do not try to focus on first component that has a validation error when submitting form\nnoresetfocus::Bool - Do not try to focus on first component when resetting form\ngreedy::Bool - Validate all fields in form (by default it stops after finding the first invalid field with synchronous validation)\n\n\n\n\n\n","category":"function"},{"location":"api/headings.html","page":"Headings","title":"Headings","text":"CurrentModule = Headings","category":"page"},{"location":"api/headings.html","page":"Headings","title":"Headings","text":"","category":"page"},{"location":"api/headings.html","page":"Headings","title":"Headings","text":"heading","category":"page"},{"location":"api/icons.html","page":"Icons","title":"Icons","text":"CurrentModule = Icons","category":"page"},{"location":"api/icons.html","page":"Icons","title":"Icons","text":"","category":"page"},{"location":"api/icons.html","page":"Icons","title":"Icons","text":"icon","category":"page"},{"location":"index.html#StippleUI","page":"Home","title":"StippleUI","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"StippleUI provides a collection of over 25 professional (web) UI elements, ready to implement in your Stipple app.","category":"page"}]
}
